
Rtos_Lesson1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800418c  0800418c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800418c  0800418c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800418c  0800418c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da0  20000078  0800420c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e18  0800420c  00020e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e58  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228b  00000000  00000000  00029f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026849  00000000  00000000  0002d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba62  00000000  00000000  00053f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec299  00000000  00000000  0005f983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bc1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  0014bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0014f144  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014f168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003fb4 	.word	0x08003fb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08003fb4 	.word	0x08003fb4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <MX_FREERTOS_Init+0x70>)
 80002c8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80002cc:	461d      	mov	r5, r3
 80002ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d2:	682b      	ldr	r3, [r5, #0]
 80002d4:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fc0c 	bl	8001afa <osThreadCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_FREERTOS_Init+0x74>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedTask1 */
  osThreadDef(LedTask1, LedTaskFunc, osPriorityAboveNormal, 0, 128);
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <MX_FREERTOS_Init+0x78>)
 80002ea:	f107 0418 	add.w	r4, r7, #24
 80002ee:	461d      	mov	r5, r3
 80002f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f4:	682b      	ldr	r3, [r5, #0]
 80002f6:	6023      	str	r3, [r4, #0]
  LedTask1Handle = osThreadCreate(osThread(LedTask1), NULL);
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fbfb 	bl	8001afa <osThreadCreate>
 8000304:	4603      	mov	r3, r0
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <MX_FREERTOS_Init+0x7c>)
 8000308:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, YellowLED, osPriorityNormal, 0, 128);
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <MX_FREERTOS_Init+0x80>)
 800030c:	1d3c      	adds	r4, r7, #4
 800030e:	461d      	mov	r5, r3
 8000310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000314:	682b      	ldr	r3, [r5, #0]
 8000316:	6023      	str	r3, [r4, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f001 fbec 	bl	8001afa <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <MX_FREERTOS_Init+0x84>)
 8000326:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000328:	bf00      	nop
 800032a:	3740      	adds	r7, #64	; 0x40
 800032c:	46bd      	mov	sp, r7
 800032e:	bdb0      	pop	{r4, r5, r7, pc}
 8000330:	08003ff0 	.word	0x08003ff0
 8000334:	200000a0 	.word	0x200000a0
 8000338:	08004004 	.word	0x08004004
 800033c:	200000a4 	.word	0x200000a4
 8000340:	08004018 	.word	0x08004018
 8000344:	200000a8 	.word	0x200000a8

08000348 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(const void *argument) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for (;;) {
    if (LD2_Period == 100) {
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <StartDefaultTask+0x2c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b64      	cmp	r3, #100	; 0x64
 8000356:	d104      	bne.n	8000362 <StartDefaultTask+0x1a>
      LD2_Period = 1000;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <StartDefaultTask+0x2c>)
 800035a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	e002      	b.n	8000368 <StartDefaultTask+0x20>
    } else
      LD2_Period = 100;
 8000362:	4b04      	ldr	r3, [pc, #16]	; (8000374 <StartDefaultTask+0x2c>)
 8000364:	2264      	movs	r2, #100	; 0x64
 8000366:	601a      	str	r2, [r3, #0]
    osDelay(5000);
 8000368:	f241 3088 	movw	r0, #5000	; 0x1388
 800036c:	f001 fbec 	bl	8001b48 <osDelay>
    if (LD2_Period == 100) {
 8000370:	e7ee      	b.n	8000350 <StartDefaultTask+0x8>
 8000372:	bf00      	nop
 8000374:	20000000 	.word	0x20000000

08000378 <LedTaskFunc>:
 * @brief Function implementing the LedTask1 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LedTaskFunc */
void LedTaskFunc(const void *argument) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskFunc */
  /* Infinite loop */
  for (;;) {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000380:	2120      	movs	r1, #32
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fdab 	bl	8000ee0 <HAL_GPIO_TogglePin>

    osDelay(LD2_Period);
 800038a:	4b03      	ldr	r3, [pc, #12]	; (8000398 <LedTaskFunc+0x20>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fbda 	bl	8001b48 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000394:	e7f4      	b.n	8000380 <LedTaskFunc+0x8>
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000

0800039c <YellowLED>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_YellowLED */
void YellowLED(const void *argument) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN YellowLED */
  srand((unsigned) time(&t));
 80003a4:	480f      	ldr	r0, [pc, #60]	; (80003e4 <YellowLED+0x48>)
 80003a6:	f002 fdd7 	bl	8002f58 <time>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	4613      	mov	r3, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fd65 	bl	8002e80 <srand>
  /* Infinite loop */
  for (;;) {
    HAL_GPIO_TogglePin(YELLOW_GPIO_PORT, YELLOW_PIN);
 80003b6:	2120      	movs	r1, #32
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <YellowLED+0x4c>)
 80003ba:	f000 fd91 	bl	8000ee0 <HAL_GPIO_TogglePin>
    //osDelay(3 * sqrt_new(LD2_Period));
    osDelay(rand() % 500);
 80003be:	f002 fd8d 	bl	8002edc <rand>
 80003c2:	4603      	mov	r3, r0
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <YellowLED+0x50>)
 80003c6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ca:	1151      	asrs	r1, r2, #5
 80003cc:	17da      	asrs	r2, r3, #31
 80003ce:	1a8a      	subs	r2, r1, r2
 80003d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003d4:	fb01 f202 	mul.w	r2, r1, r2
 80003d8:	1a9a      	subs	r2, r3, r2
 80003da:	4613      	mov	r3, r2
 80003dc:	4618      	mov	r0, r3
 80003de:	f001 fbb3 	bl	8001b48 <osDelay>
    HAL_GPIO_TogglePin(YELLOW_GPIO_PORT, YELLOW_PIN);
 80003e2:	e7e8      	b.n	80003b6 <YellowLED+0x1a>
 80003e4:	20000098 	.word	0x20000098
 80003e8:	48000400 	.word	0x48000400
 80003ec:	10624dd3 	.word	0x10624dd3

080003f0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b4c      	ldr	r3, [pc, #304]	; (8000538 <MX_GPIO_Init+0x148>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	4a4b      	ldr	r2, [pc, #300]	; (8000538 <MX_GPIO_Init+0x148>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000412:	4b49      	ldr	r3, [pc, #292]	; (8000538 <MX_GPIO_Init+0x148>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b46      	ldr	r3, [pc, #280]	; (8000538 <MX_GPIO_Init+0x148>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	4a45      	ldr	r2, [pc, #276]	; (8000538 <MX_GPIO_Init+0x148>)
 8000424:	f043 0320 	orr.w	r3, r3, #32
 8000428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042a:	4b43      	ldr	r3, [pc, #268]	; (8000538 <MX_GPIO_Init+0x148>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b40      	ldr	r3, [pc, #256]	; (8000538 <MX_GPIO_Init+0x148>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4a3f      	ldr	r2, [pc, #252]	; (8000538 <MX_GPIO_Init+0x148>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <MX_GPIO_Init+0x148>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <MX_GPIO_Init+0x148>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a39      	ldr	r2, [pc, #228]	; (8000538 <MX_GPIO_Init+0x148>)
 8000454:	f043 0302 	orr.w	r3, r3, #2
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <MX_GPIO_Init+0x148>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f000 fd1f 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4830      	ldr	r0, [pc, #192]	; (800053c <MX_GPIO_Init+0x14c>)
 800047a:	f000 fd19 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2120      	movs	r1, #32
 8000482:	482f      	ldr	r0, [pc, #188]	; (8000540 <MX_GPIO_Init+0x150>)
 8000484:	f000 fd14 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800048e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4619      	mov	r1, r3
 800049e:	4827      	ldr	r0, [pc, #156]	; (800053c <MX_GPIO_Init+0x14c>)
 80004a0:	f000 fb84 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80004a4:	230c      	movs	r3, #12
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80004b4:	230c      	movs	r3, #12
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	4619      	mov	r1, r3
 80004be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c2:	f000 fb73 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c6:	2320      	movs	r3, #32
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	4619      	mov	r1, r3
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fb64 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2300      	movs	r3, #0
 80004f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <MX_GPIO_Init+0x14c>)
 80004fe:	f000 fb55 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000502:	2320      	movs	r3, #32
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	2301      	movs	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <MX_GPIO_Init+0x150>)
 800051a:	f000 fb47 	bl	8000bac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2105      	movs	r1, #5
 8000522:	2028      	movs	r0, #40	; 0x28
 8000524:	f000 fb0d 	bl	8000b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000528:	2028      	movs	r0, #40	; 0x28
 800052a:	f000 fb24 	bl	8000b76 <HAL_NVIC_EnableIRQ>

}
 800052e:	bf00      	nop
 8000530:	3728      	adds	r7, #40	; 0x28
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	48000800 	.word	0x48000800
 8000540:	48000400 	.word	0x48000400

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 f9af 	bl	80008aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f807 	bl	800055e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f7ff ff4e 	bl	80003f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000554:	f7ff feb4 	bl	80002c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000558:	f001 fac8 	bl	8001aec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    NVIC_SystemReset;
 800055c:	e7fe      	b.n	800055c <main+0x18>

0800055e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b094      	sub	sp, #80	; 0x50
 8000562:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	2238      	movs	r2, #56	; 0x38
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fc7f 	bl	8002e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fceb 	bl	8000f5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059c:	2304      	movs	r3, #4
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005a0:	2355      	movs	r3, #85	; 0x55
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fd85 	bl	80010c4 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c0:	f000 f818 	bl	80005f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2104      	movs	r1, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f889 	bl	80016f4 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e8:	f000 f804 	bl	80005f4 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80005fc:	e7fe      	b.n	80005fc <Error_Handler+0x8>
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_MspInit+0x50>)
 8000608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <HAL_MspInit+0x50>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6613      	str	r3, [r2, #96]	; 0x60
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_MspInit+0x50>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_MspInit+0x50>)
 8000620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <HAL_MspInit+0x50>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6593      	str	r3, [r2, #88]	; 0x58
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_MspInit+0x50>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	210f      	movs	r1, #15
 800063a:	f06f 0001 	mvn.w	r0, #1
 800063e:	f000 fa80 	bl	8000b42 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000642:	f000 fd2f 	bl	80010a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f964 	bl	8000950 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000688:	f001 ff48 	bl	800251c <xTaskGetSchedulerState>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d001      	beq.n	8000696 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000692:	f002 f989 	bl	80029a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800069e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a2:	f000 fc37 	bl	8000f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  return 1;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <_kill>:

int _kill(int pid, int sig)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80006c4:	f002 fbaa 	bl	8002e1c <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2216      	movs	r2, #22
 80006cc:	601a      	str	r2, [r3, #0]
  return -1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_exit>:

void _exit (int status)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006e2:	f04f 31ff 	mov.w	r1, #4294967295
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ffe7 	bl	80006ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80006ec:	e7fe      	b.n	80006ec <_exit+0x12>

080006ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e00a      	b.n	8000716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000700:	f3af 8000 	nop.w
 8000704:	4601      	mov	r1, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	b2ca      	uxtb	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	dbf0      	blt.n	8000700 <_read+0x12>
  }

  return len;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e009      	b.n	800074e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	60ba      	str	r2, [r7, #8]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbf1      	blt.n	800073a <_write+0x12>
  }
  return len;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_close>:

int _close(int file)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000788:	605a      	str	r2, [r3, #4]
  return 0;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_isatty>:

int _isatty(int file)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 fb10 	bl	8002e1c <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20020000 	.word	0x20020000
 8000828:	00000400 	.word	0x00000400
 800082c:	200000ac 	.word	0x200000ac
 8000830:	20000e18 	.word	0x20000e18

08000834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffd7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f002 facf 	bl	8002e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fe5b 	bl	8000544 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   r0, =_estack
 8000890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800089c:	08004194 	.word	0x08004194
  ldr r2, =_sbss
 80008a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80008a4:	20000e18 	.word	0x20000e18

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f939 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f80e 	bl	80008dc <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e001      	b.n	80008d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008cc:	f7ff fe98 	bl	8000600 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d0:	79fb      	ldrb	r3, [r7, #7]

}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_InitTick+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d022      	beq.n	8000936 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_InitTick+0x6c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_InitTick+0x68>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f944 	bl	8000b92 <HAL_SYSTICK_Config>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10f      	bne.n	8000930 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b0f      	cmp	r3, #15
 8000914:	d809      	bhi.n	800092a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	2200      	movs	r2, #0
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f000 f910 	bl	8000b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_InitTick+0x70>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e007      	b.n	800093a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e004      	b.n	800093a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e001      	b.n	800093a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000004 	.word	0x20000004
 800094c:	20000008 	.word	0x20000008

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x1c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a03      	ldr	r2, [pc, #12]	; (800096c <HAL_IncTick+0x1c>)
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200000b0 	.word	0x200000b0
 8000970:	2000000c 	.word	0x2000000c

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200000b0 	.word	0x200000b0

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <__NVIC_EnableIRQ+0x38>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff29 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff40 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff33 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa4 	bl	8000ae8 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000bba:	e15a      	b.n	8000e72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 814c 	beq.w	8000e6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d005      	beq.n	8000bec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d130      	bne.n	8000c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c22:	2201      	movs	r2, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	091b      	lsrs	r3, r3, #4
 8000c38:	f003 0201 	and.w	r2, r3, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d017      	beq.n	8000c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d123      	bne.n	8000cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0203 	and.w	r2, r3, #3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80a6 	beq.w	8000e6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <HAL_GPIO_Init+0x2e4>)
 8000d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d24:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <HAL_GPIO_Init+0x2e4>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2c:	4b58      	ldr	r3, [pc, #352]	; (8000e90 <HAL_GPIO_Init+0x2e4>)
 8000d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d38:	4a56      	ldr	r2, [pc, #344]	; (8000e94 <HAL_GPIO_Init+0x2e8>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d62:	d01f      	beq.n	8000da4 <HAL_GPIO_Init+0x1f8>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4c      	ldr	r2, [pc, #304]	; (8000e98 <HAL_GPIO_Init+0x2ec>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d019      	beq.n	8000da0 <HAL_GPIO_Init+0x1f4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_GPIO_Init+0x2f0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1f0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x2f4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1ec>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2f8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1e8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2fc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1e4>
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	e00a      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000d90:	2306      	movs	r3, #6
 8000d92:	e008      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e004      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x1fa>
 8000da4:	2300      	movs	r3, #0
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	f002 0203 	and.w	r2, r2, #3
 8000dac:	0092      	lsls	r2, r2, #2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db6:	4937      	ldr	r1, [pc, #220]	; (8000e94 <HAL_GPIO_Init+0x2e8>)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc4:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_GPIO_Init+0x300>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f47f ae9d 	bne.w	8000bbc <HAL_GPIO_Init+0x10>
  }
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	371c      	adds	r7, #28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000c00 	.word	0x48000c00
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43d9      	mvns	r1, r3
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	400b      	ands	r3, r1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f20:	695a      	ldr	r2, [r3, #20]
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4013      	ands	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f806 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010400 	.word	0x40010400

08000f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d141      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d131      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f78:	4b47      	ldr	r3, [pc, #284]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f7e:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	4b43      	ldr	r3, [pc, #268]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f90:	4a41      	ldr	r2, [pc, #260]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f98:	4b40      	ldr	r3, [pc, #256]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2232      	movs	r2, #50	; 0x32
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9b      	lsrs	r3, r3, #18
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fae:	e002      	b.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc2:	d102      	bne.n	8000fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f2      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd6:	d158      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e057      	b.n	800108c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fec:	e04d      	b.n	800108a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff4:	d141      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001002:	d131      	bne.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2232      	movs	r2, #50	; 0x32
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800103a:	e002      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3b01      	subs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104e:	d102      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f2      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d112      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e011      	b.n	800108c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001078:	e007      	b.n	800108a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001088:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40007000 	.word	0x40007000
 800109c:	20000004 	.word	0x20000004
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	6093      	str	r3, [r2, #8]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40007000 	.word	0x40007000

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e306      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d075      	beq.n	80011ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e2:	4b97      	ldr	r3, [pc, #604]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ec:	4b94      	ldr	r3, [pc, #592]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	d102      	bne.n	8001102 <HAL_RCC_OscConfig+0x3e>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d002      	beq.n	8001108 <HAL_RCC_OscConfig+0x44>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b08      	cmp	r3, #8
 8001106:	d10b      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b8d      	ldr	r3, [pc, #564]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d05b      	beq.n	80011cc <HAL_RCC_OscConfig+0x108>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d157      	bne.n	80011cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e2e1      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x74>
 800112a:	4b85      	ldr	r3, [pc, #532]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a84      	ldr	r2, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x98>
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b7c      	ldr	r3, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7b      	ldr	r2, [pc, #492]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 800115c:	4b78      	ldr	r3, [pc, #480]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a77      	ldr	r2, [pc, #476]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a74      	ldr	r2, [pc, #464]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fbfa 	bl	8000974 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fbf6 	bl	8000974 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e2a6      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xc0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbe6 	bl	8000974 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fbe2 	bl	8000974 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e292      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011be:	4b60      	ldr	r3, [pc, #384]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0xe8>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d075      	beq.n	80012c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	d102      	bne.n	80011fa <HAL_RCC_OscConfig+0x136>
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_OscConfig+0x13c>
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d11f      	bne.n	8001240 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_OscConfig+0x154>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e265      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	061b      	lsls	r3, r3, #24
 8001226:	4946      	ldr	r1, [pc, #280]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800122c:	4b45      	ldr	r3, [pc, #276]	; (8001344 <HAL_RCC_OscConfig+0x280>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fb53 	bl	80008dc <HAL_InitTick>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e251      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d023      	beq.n	8001290 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fb8e 	bl	8000974 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fb8a 	bl	8000974 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e23a      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	061b      	lsls	r3, r3, #24
 8001288:	492d      	ldr	r1, [pc, #180]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e01a      	b.n	80012c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2a      	ldr	r2, [pc, #168]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800129a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fb6a 	bl	8000974 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb66 	bl	8000974 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e216      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1e0>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d041      	beq.n	8001356 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01c      	beq.n	8001314 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80012dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb43 	bl	8000974 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fb3f 	bl	8000974 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e1ef      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0ef      	beq.n	80012f2 <HAL_RCC_OscConfig+0x22e>
 8001312:	e020      	b.n	8001356 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x27c>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fb26 	bl	8000974 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800132a:	e00d      	b.n	8001348 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fb22 	bl	8000974 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d906      	bls.n	8001348 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1d2      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	4b8c      	ldr	r3, [pc, #560]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ea      	bne.n	800132c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a6 	beq.w	80014b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001368:	4b84      	ldr	r3, [pc, #528]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_OscConfig+0x2b4>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x2b6>
 8001378:	2300      	movs	r3, #0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00d      	beq.n	800139a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a7e      	ldr	r2, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b7c      	ldr	r3, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139a:	4b79      	ldr	r3, [pc, #484]	; (8001580 <HAL_RCC_OscConfig+0x4bc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x4bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a75      	ldr	r2, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x4bc>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fadf 	bl	8000974 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fadb 	bl	8000974 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e18b      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x4bc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d108      	bne.n	80013f2 <HAL_RCC_OscConfig+0x32e>
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e6:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f0:	e024      	b.n	800143c <HAL_RCC_OscConfig+0x378>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d110      	bne.n	800141c <HAL_RCC_OscConfig+0x358>
 80013fa:	4b60      	ldr	r3, [pc, #384]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001410:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141a:	e00f      	b.n	800143c <HAL_RCC_OscConfig+0x378>
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	4a56      	ldr	r2, [pc, #344]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d016      	beq.n	8001472 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fa96 	bl	8000974 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fa92 	bl	8000974 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e140      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001462:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ed      	beq.n	800144c <HAL_RCC_OscConfig+0x388>
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fa7f 	bl	8000974 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa7b 	bl	8000974 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e129      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ed      	bne.n	800147a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a34      	ldr	r2, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03c      	beq.n	8001536 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80014c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014ca:	4a2c      	ldr	r2, [pc, #176]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fa4e 	bl	8000974 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014dc:	f7ff fa4a 	bl	8000974 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e0fa      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ef      	beq.n	80014dc <HAL_RCC_OscConfig+0x418>
 80014fc:	e01b      	b.n	8001536 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001504:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fa31 	bl	8000974 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fa2d 	bl	8000974 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0dd      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800152a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ef      	bne.n	8001516 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80d1 	beq.w	80016e2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b0c      	cmp	r3, #12
 800154a:	f000 808b 	beq.w	8001664 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d15e      	bne.n	8001614 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x4b8>)
 800155c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fa07 	bl	8000974 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001568:	e00c      	b.n	8001584 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fa03 	bl	8000974 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d905      	bls.n	8001584 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0b3      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ec      	bne.n	800156a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_RCC_OscConfig+0x62c>)
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6a11      	ldr	r1, [r2, #32]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a0:	3a01      	subs	r2, #1
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	4311      	orrs	r1, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015aa:	0212      	lsls	r2, r2, #8
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b2:	0852      	lsrs	r2, r2, #1
 80015b4:	3a01      	subs	r2, #1
 80015b6:	0552      	lsls	r2, r2, #21
 80015b8:	4311      	orrs	r1, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015be:	0852      	lsrs	r2, r2, #1
 80015c0:	3a01      	subs	r2, #1
 80015c2:	0652      	lsls	r2, r2, #25
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015ca:	06d2      	lsls	r2, r2, #27
 80015cc:	430a      	orrs	r2, r1
 80015ce:	4947      	ldr	r1, [pc, #284]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a44      	ldr	r2, [pc, #272]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a41      	ldr	r2, [pc, #260]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff f9c2 	bl	8000974 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff f9be 	bl	8000974 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e06e      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x530>
 8001612:	e066      	b.n	80016e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a34      	ldr	r2, [pc, #208]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 800161a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001632:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff f99a 	bl	8000974 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff f996 	bl	8000974 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e046      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x580>
 8001662:	e03e      	b.n	80016e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e039      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_RCC_OscConfig+0x628>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	429a      	cmp	r2, r3
 8001682:	d12c      	bne.n	80016de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d123      	bne.n	80016de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d11b      	bne.n	80016de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d113      	bne.n	80016de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d109      	bne.n	80016de <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	019f800c 	.word	0x019f800c

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e11e      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b91      	ldr	r3, [pc, #580]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b8e      	ldr	r3, [pc, #568]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 020f 	bic.w	r2, r3, #15
 8001722:	498c      	ldr	r1, [pc, #560]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b8a      	ldr	r3, [pc, #552]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e106      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d073      	beq.n	8001830 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d129      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0f4      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001760:	f000 f966 	bl	8001a30 <RCC_GetSysClockFreqFromPLLSource>
 8001764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4a7c      	ldr	r2, [pc, #496]	; (800195c <HAL_RCC_ClockConfig+0x268>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d93f      	bls.n	80017ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800176e:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001782:	2b00      	cmp	r3, #0
 8001784:	d033      	beq.n	80017ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d12f      	bne.n	80017ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800178e:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001796:	4a70      	ldr	r2, [pc, #448]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e024      	b.n	80017ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ac:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0c6      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0be      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017cc:	f000 f8ce 	bl	800196c <HAL_RCC_GetSysClockFreq>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4a61      	ldr	r2, [pc, #388]	; (800195c <HAL_RCC_ClockConfig+0x268>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d909      	bls.n	80017ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017e2:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4957      	ldr	r1, [pc, #348]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff f8b8 	bl	8000974 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f8b4 	bl	8000974 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e095      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d023      	beq.n	8001884 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a42      	ldr	r2, [pc, #264]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800184e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001852:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001860:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001868:	4a3b      	ldr	r2, [pc, #236]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800186a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800186e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4936      	ldr	r1, [pc, #216]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
 8001882:	e008      	b.n	8001896 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b80      	cmp	r3, #128	; 0x80
 8001888:	d105      	bne.n	8001896 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001894:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d21d      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 020f 	bic.w	r2, r3, #15
 80018ac:	4929      	ldr	r1, [pc, #164]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018b4:	f7ff f85e 	bl	8000974 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f85a 	bl	8000974 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e03b      	b.n	800194a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_ClockConfig+0x260>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1ed      	bne.n	80018bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4917      	ldr	r1, [pc, #92]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490f      	ldr	r1, [pc, #60]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191e:	f000 f825 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_ClockConfig+0x264>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490c      	ldr	r1, [pc, #48]	; (8001960 <HAL_RCC_ClockConfig+0x26c>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x270>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe ffca 	bl	80008dc <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000
 8001958:	40021000 	.word	0x40021000
 800195c:	04c4b400 	.word	0x04c4b400
 8001960:	08004034 	.word	0x08004034
 8001964:	20000004 	.word	0x20000004
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b04      	cmp	r3, #4
 800197c:	d102      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e047      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d102      	bne.n	8001996 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	e03e      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d136      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d10c      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019c0:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ca:	68d2      	ldr	r2, [r2, #12]
 80019cc:	0a12      	lsrs	r2, r2, #8
 80019ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
      break;
 80019d8:	e00c      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e4:	68d2      	ldr	r2, [r2, #12]
 80019e6:	0a12      	lsrs	r2, r2, #8
 80019e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
      break;
 80019f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0e5b      	lsrs	r3, r3, #25
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	3301      	adds	r3, #1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e001      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a14:	693b      	ldr	r3, [r7, #16]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	016e3600 	.word	0x016e3600

08001a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d10c      	bne.n	8001a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a54:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a5e:	68d2      	ldr	r2, [r2, #12]
 8001a60:	0a12      	lsrs	r2, r2, #8
 8001a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
    break;
 8001a6c:	e00c      	b.n	8001a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a78:	68d2      	ldr	r2, [r2, #12]
 8001a7a:	0a12      	lsrs	r2, r2, #8
 8001a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    break;
 8001a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0e5b      	lsrs	r3, r3, #25
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	016e3600 	.word	0x016e3600
 8001ab8:	00f42400 	.word	0x00f42400

08001abc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	2b84      	cmp	r3, #132	; 0x84
 8001ad0:	d005      	beq.n	8001ade <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ad2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4413      	add	r3, r2
 8001ada:	3303      	adds	r3, #3
 8001adc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001af0:	f000 fa58 	bl	8001fa4 <vTaskStartScheduler>
  
  return osOK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}

08001afa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af02      	add	r7, sp, #8
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685c      	ldr	r4, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b10:	b29e      	uxth	r6, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffcf 	bl	8001abc <makeFreeRtosPriority>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9200      	str	r2, [sp, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4632      	mov	r2, r6
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f000 f8d2 	bl	8001cd8 <xTaskCreate>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <osDelay+0x16>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	e000      	b.n	8001b60 <osDelay+0x18>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f9eb 	bl	8001f3c <vTaskDelay>
  
  return osOK;
 8001b66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 0208 	add.w	r2, r3, #8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f103 0208 	add.w	r2, r3, #8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f103 0208 	add.w	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d103      	bne.n	8001c32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e00c      	b.n	8001c4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3308      	adds	r3, #8
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e002      	b.n	8001c40 <vListInsert+0x2e>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d2f6      	bcs.n	8001c3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	601a      	str	r2, [r3, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6892      	ldr	r2, [r2, #8]
 8001c9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d103      	bne.n	8001cb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af04      	add	r7, sp, #16
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 feab 	bl	8002a48 <pvPortMalloc>
 8001cf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001cfa:	2054      	movs	r0, #84	; 0x54
 8001cfc:	f000 fea4 	bl	8002a48 <pvPortMalloc>
 8001d00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0e:	e005      	b.n	8001d1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d10:	6978      	ldr	r0, [r7, #20]
 8001d12:	f000 ff65 	bl	8002be0 <vPortFree>
 8001d16:	e001      	b.n	8001d1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d013      	beq.n	8001d4a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9303      	str	r3, [sp, #12]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f80e 	bl	8001d5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d3e:	69f8      	ldr	r0, [r7, #28]
 8001d40:	f000 f892 	bl	8001e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d44:	2301      	movs	r3, #1
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e002      	b.n	8001d50 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d50:	69bb      	ldr	r3, [r7, #24]
	}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b088      	sub	sp, #32
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d72:	3b01      	subs	r3, #1
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f023 0307 	bic.w	r3, r3, #7
 8001d80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d9e:	bf00      	nop
 8001da0:	e7fe      	b.n	8001da0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01f      	beq.n	8001de8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e012      	b.n	8001dd4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	7819      	ldrb	r1, [r3, #0]
 8001db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3334      	adds	r3, #52	; 0x34
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d9e9      	bls.n	8001dae <prvInitialiseNewTask+0x54>
 8001dda:	e000      	b.n	8001dde <prvInitialiseNewTask+0x84>
			{
				break;
 8001ddc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de6:	e003      	b.n	8001df0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d901      	bls.n	8001dfa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001df6:	2306      	movs	r3, #6
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fecd 	bl	8001bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	3318      	adds	r3, #24
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fec8 	bl	8001bb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	f1c3 0207 	rsb	r2, r3, #7
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	2200      	movs	r2, #0
 8001e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	69b8      	ldr	r0, [r7, #24]
 8001e4a:	f000 fbeb 	bl	8002624 <pxPortInitialiseStack>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e70:	f000 fd08 	bl	8002884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <prvAddNewTaskToReadyList+0xb8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d110      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e94:	f000 faa4 	bl	80023e0 <prvInitialiseTaskLists>
 8001e98:	e00d      	b.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <prvAddNewTaskToReadyList+0xc0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d802      	bhi.n	8001eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <prvAddNewTaskToReadyList+0xc4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <prvAddNewTaskToReadyList+0xc4>)
 8001ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <prvAddNewTaskToReadyList+0xc8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <prvAddNewTaskToReadyList+0xc8>)
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <prvAddNewTaskToReadyList+0xcc>)
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7ff fe6e 	bl	8001bca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001eee:	f000 fcf9 	bl	80028e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <prvAddNewTaskToReadyList+0xc0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <prvAddNewTaskToReadyList+0xbc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <prvAddNewTaskToReadyList+0xd0>)
 8001f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200001b4 	.word	0x200001b4
 8001f24:	200000b4 	.word	0x200000b4
 8001f28:	200001c0 	.word	0x200001c0
 8001f2c:	200001d0 	.word	0x200001d0
 8001f30:	200001bc 	.word	0x200001bc
 8001f34:	200000b8 	.word	0x200000b8
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d017      	beq.n	8001f7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <vTaskDelay+0x60>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <vTaskDelay+0x30>
	__asm volatile
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
 8001f66:	60bb      	str	r3, [r7, #8]
}
 8001f68:	bf00      	nop
 8001f6a:	e7fe      	b.n	8001f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001f6c:	f000 f862 	bl	8002034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f70:	2100      	movs	r1, #0
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 faf0 	bl	8002558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001f78:	f000 f86a 	bl	8002050 <xTaskResumeAll>
 8001f7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <vTaskDelay+0x64>)
 8001f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200001dc 	.word	0x200001dc
 8001fa0:	e000ed04 	.word	0xe000ed04

08001fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <vTaskStartScheduler+0x78>)
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	491a      	ldr	r1, [pc, #104]	; (8002020 <vTaskStartScheduler+0x7c>)
 8001fb8:	481a      	ldr	r0, [pc, #104]	; (8002024 <vTaskStartScheduler+0x80>)
 8001fba:	f7ff fe8d 	bl	8001cd8 <xTaskCreate>
 8001fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d116      	bne.n	8001ff4 <vTaskStartScheduler+0x50>
	__asm volatile
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	60bb      	str	r3, [r7, #8]
}
 8001fd8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <vTaskStartScheduler+0x84>)
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <vTaskStartScheduler+0x88>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <vTaskStartScheduler+0x8c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001fee:	f000 fba7 	bl	8002740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ff2:	e00e      	b.n	8002012 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d10a      	bne.n	8002012 <vTaskStartScheduler+0x6e>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	607b      	str	r3, [r7, #4]
}
 800200e:	bf00      	nop
 8002010:	e7fe      	b.n	8002010 <vTaskStartScheduler+0x6c>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200001d8 	.word	0x200001d8
 8002020:	0800402c 	.word	0x0800402c
 8002024:	080023b1 	.word	0x080023b1
 8002028:	200001d4 	.word	0x200001d4
 800202c:	200001c0 	.word	0x200001c0
 8002030:	200001b8 	.word	0x200001b8

08002034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <vTaskSuspendAll+0x18>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a03      	ldr	r2, [pc, #12]	; (800204c <vTaskSuspendAll+0x18>)
 8002040:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	200001dc 	.word	0x200001dc

08002050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <xTaskResumeAll+0x114>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <xTaskResumeAll+0x2c>
	__asm volatile
 8002066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800206a:	f383 8811 	msr	BASEPRI, r3
 800206e:	f3bf 8f6f 	isb	sy
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	603b      	str	r3, [r7, #0]
}
 8002078:	bf00      	nop
 800207a:	e7fe      	b.n	800207a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800207c:	f000 fc02 	bl	8002884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002080:	4b38      	ldr	r3, [pc, #224]	; (8002164 <xTaskResumeAll+0x114>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	4a37      	ldr	r2, [pc, #220]	; (8002164 <xTaskResumeAll+0x114>)
 8002088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <xTaskResumeAll+0x114>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d161      	bne.n	8002156 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <xTaskResumeAll+0x118>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d05d      	beq.n	8002156 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800209a:	e02e      	b.n	80020fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <xTaskResumeAll+0x11c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3318      	adds	r3, #24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fdeb 	bl	8001c84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3304      	adds	r3, #4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fde6 	bl	8001c84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <xTaskResumeAll+0x120>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <xTaskResumeAll+0x120>)
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <xTaskResumeAll+0x124>)
 80020d8:	441a      	add	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7ff fd72 	bl	8001bca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <xTaskResumeAll+0x128>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d302      	bcc.n	80020fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <xTaskResumeAll+0x12c>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <xTaskResumeAll+0x11c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1cc      	bne.n	800209c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002108:	f000 f9e8 	bl	80024dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <xTaskResumeAll+0x130>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d010      	beq.n	800213a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002118:	f000 f836 	bl	8002188 <xTaskIncrementTick>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <xTaskResumeAll+0x12c>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f1      	bne.n	8002118 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <xTaskResumeAll+0x130>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <xTaskResumeAll+0x12c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002142:	2301      	movs	r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <xTaskResumeAll+0x134>)
 8002148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002156:	f000 fbc5 	bl	80028e4 <vPortExitCritical>

	return xAlreadyYielded;
 800215a:	68bb      	ldr	r3, [r7, #8]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200001dc 	.word	0x200001dc
 8002168:	200001b4 	.word	0x200001b4
 800216c:	20000174 	.word	0x20000174
 8002170:	200001bc 	.word	0x200001bc
 8002174:	200000b8 	.word	0x200000b8
 8002178:	200000b4 	.word	0x200000b4
 800217c:	200001c8 	.word	0x200001c8
 8002180:	200001c4 	.word	0x200001c4
 8002184:	e000ed04 	.word	0xe000ed04

08002188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002192:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <xTaskIncrementTick+0x144>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 808e 	bne.w	80022b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <xTaskIncrementTick+0x148>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80021a4:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <xTaskIncrementTick+0x148>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d120      	bne.n	80021f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80021b0:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <xTaskIncrementTick+0x14c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	603b      	str	r3, [r7, #0]
}
 80021cc:	bf00      	nop
 80021ce:	e7fe      	b.n	80021ce <xTaskIncrementTick+0x46>
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <xTaskIncrementTick+0x14c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <xTaskIncrementTick+0x150>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a3e      	ldr	r2, [pc, #248]	; (80022d4 <xTaskIncrementTick+0x14c>)
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <xTaskIncrementTick+0x150>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <xTaskIncrementTick+0x154>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <xTaskIncrementTick+0x154>)
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	f000 f975 	bl	80024dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <xTaskIncrementTick+0x158>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d348      	bcc.n	800228e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <xTaskIncrementTick+0x14c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <xTaskIncrementTick+0x158>)
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	601a      	str	r2, [r3, #0]
					break;
 800220e:	e03e      	b.n	800228e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <xTaskIncrementTick+0x14c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d203      	bcs.n	8002230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <xTaskIncrementTick+0x158>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800222e:	e02e      	b.n	800228e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fd25 	bl	8001c84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	3318      	adds	r3, #24
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd1c 	bl	8001c84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2201      	movs	r2, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <xTaskIncrementTick+0x15c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4313      	orrs	r3, r2
 800225a:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <xTaskIncrementTick+0x15c>)
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <xTaskIncrementTick+0x160>)
 800226c:	441a      	add	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3304      	adds	r3, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7ff fca8 	bl	8001bca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <xTaskIncrementTick+0x164>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	429a      	cmp	r2, r3
 8002286:	d3b9      	bcc.n	80021fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002288:	2301      	movs	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800228c:	e7b6      	b.n	80021fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <xTaskIncrementTick+0x164>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	4914      	ldr	r1, [pc, #80]	; (80022e8 <xTaskIncrementTick+0x160>)
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d901      	bls.n	80022aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80022a6:	2301      	movs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <xTaskIncrementTick+0x168>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e004      	b.n	80022c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <xTaskIncrementTick+0x16c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <xTaskIncrementTick+0x16c>)
 80022c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80022c2:	697b      	ldr	r3, [r7, #20]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	200001dc 	.word	0x200001dc
 80022d0:	200001b8 	.word	0x200001b8
 80022d4:	2000016c 	.word	0x2000016c
 80022d8:	20000170 	.word	0x20000170
 80022dc:	200001cc 	.word	0x200001cc
 80022e0:	200001d4 	.word	0x200001d4
 80022e4:	200001bc 	.word	0x200001bc
 80022e8:	200000b8 	.word	0x200000b8
 80022ec:	200000b4 	.word	0x200000b4
 80022f0:	200001c8 	.word	0x200001c8
 80022f4:	200001c4 	.word	0x200001c4

080022f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022fe:	4b27      	ldr	r3, [pc, #156]	; (800239c <vTaskSwitchContext+0xa4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <vTaskSwitchContext+0xa8>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800230c:	e03f      	b.n	800238e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <vTaskSwitchContext+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <vTaskSwitchContext+0xac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	f1c3 031f 	rsb	r3, r3, #31
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	491f      	ldr	r1, [pc, #124]	; (80023a8 <vTaskSwitchContext+0xb0>)
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <vTaskSwitchContext+0x5c>
	__asm volatile
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	607b      	str	r3, [r7, #4]
}
 8002350:	bf00      	nop
 8002352:	e7fe      	b.n	8002352 <vTaskSwitchContext+0x5a>
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <vTaskSwitchContext+0xb0>)
 8002360:	4413      	add	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3308      	adds	r3, #8
 8002376:	429a      	cmp	r2, r3
 8002378:	d104      	bne.n	8002384 <vTaskSwitchContext+0x8c>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <vTaskSwitchContext+0xb4>)
 800238c:	6013      	str	r3, [r2, #0]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200001dc 	.word	0x200001dc
 80023a0:	200001c8 	.word	0x200001c8
 80023a4:	200001bc 	.word	0x200001bc
 80023a8:	200000b8 	.word	0x200000b8
 80023ac:	200000b4 	.word	0x200000b4

080023b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80023b8:	f000 f852 	bl	8002460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <prvIdleTask+0x28>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d9f9      	bls.n	80023b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <prvIdleTask+0x2c>)
 80023c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80023d4:	e7f0      	b.n	80023b8 <prvIdleTask+0x8>
 80023d6:	bf00      	nop
 80023d8:	200000b8 	.word	0x200000b8
 80023dc:	e000ed04 	.word	0xe000ed04

080023e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	e00c      	b.n	8002406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <prvInitialiseTaskLists+0x60>)
 80023f8:	4413      	add	r3, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fbb8 	bl	8001b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3301      	adds	r3, #1
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d9ef      	bls.n	80023ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <prvInitialiseTaskLists+0x64>)
 800240e:	f7ff fbaf 	bl	8001b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002412:	480d      	ldr	r0, [pc, #52]	; (8002448 <prvInitialiseTaskLists+0x68>)
 8002414:	f7ff fbac 	bl	8001b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <prvInitialiseTaskLists+0x6c>)
 800241a:	f7ff fba9 	bl	8001b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800241e:	480c      	ldr	r0, [pc, #48]	; (8002450 <prvInitialiseTaskLists+0x70>)
 8002420:	f7ff fba6 	bl	8001b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002424:	480b      	ldr	r0, [pc, #44]	; (8002454 <prvInitialiseTaskLists+0x74>)
 8002426:	f7ff fba3 	bl	8001b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <prvInitialiseTaskLists+0x78>)
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <prvInitialiseTaskLists+0x64>)
 800242e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <prvInitialiseTaskLists+0x7c>)
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <prvInitialiseTaskLists+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200000b8 	.word	0x200000b8
 8002444:	20000144 	.word	0x20000144
 8002448:	20000158 	.word	0x20000158
 800244c:	20000174 	.word	0x20000174
 8002450:	20000188 	.word	0x20000188
 8002454:	200001a0 	.word	0x200001a0
 8002458:	2000016c 	.word	0x2000016c
 800245c:	20000170 	.word	0x20000170

08002460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002466:	e019      	b.n	800249c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002468:	f000 fa0c 	bl	8002884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <prvCheckTasksWaitingTermination+0x50>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc03 	bl	8001c84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <prvCheckTasksWaitingTermination+0x54>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3b01      	subs	r3, #1
 8002484:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <prvCheckTasksWaitingTermination+0x54>)
 8002486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <prvCheckTasksWaitingTermination+0x58>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3b01      	subs	r3, #1
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <prvCheckTasksWaitingTermination+0x58>)
 8002490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002492:	f000 fa27 	bl	80028e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f810 	bl	80024bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <prvCheckTasksWaitingTermination+0x58>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e1      	bne.n	8002468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000188 	.word	0x20000188
 80024b4:	200001b4 	.word	0x200001b4
 80024b8:	2000019c 	.word	0x2000019c

080024bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fb89 	bl	8002be0 <vPortFree>
			vPortFree( pxTCB );
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fb86 	bl	8002be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <prvResetNextTaskUnblockTime+0x38>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <prvResetNextTaskUnblockTime+0x3c>)
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024f4:	e008      	b.n	8002508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <prvResetNextTaskUnblockTime+0x38>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <prvResetNextTaskUnblockTime+0x3c>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	2000016c 	.word	0x2000016c
 8002518:	200001d4 	.word	0x200001d4

0800251c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <xTaskGetSchedulerState+0x34>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800252a:	2301      	movs	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e008      	b.n	8002542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <xTaskGetSchedulerState+0x38>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002538:	2302      	movs	r3, #2
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	e001      	b.n	8002542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002542:	687b      	ldr	r3, [r7, #4]
	}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	200001c0 	.word	0x200001c0
 8002554:	200001dc 	.word	0x200001dc

08002558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3304      	adds	r3, #4
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb88 	bl	8001c84 <uxListRemove>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <prvAddCurrentTaskToDelayedList+0xb8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4013      	ands	r3, r2
 800258e:	4a20      	ldr	r2, [pc, #128]	; (8002610 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002590:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d10a      	bne.n	80025b0 <prvAddCurrentTaskToDelayedList+0x58>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	481a      	ldr	r0, [pc, #104]	; (8002614 <prvAddCurrentTaskToDelayedList+0xbc>)
 80025aa:	f7ff fb0e 	bl	8001bca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80025ae:	e026      	b.n	80025fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d209      	bcs.n	80025dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <prvAddCurrentTaskToDelayedList+0xc0>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3304      	adds	r3, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f7ff fb1c 	bl	8001c12 <vListInsert>
}
 80025da:	e010      	b.n	80025fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <prvAddCurrentTaskToDelayedList+0xc4>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <prvAddCurrentTaskToDelayedList+0xb4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3304      	adds	r3, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7ff fb12 	bl	8001c12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <prvAddCurrentTaskToDelayedList+0xc8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d202      	bcs.n	80025fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80025f8:	4a09      	ldr	r2, [pc, #36]	; (8002620 <prvAddCurrentTaskToDelayedList+0xc8>)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200001b8 	.word	0x200001b8
 800260c:	200000b4 	.word	0x200000b4
 8002610:	200001bc 	.word	0x200001bc
 8002614:	200001a0 	.word	0x200001a0
 8002618:	20000170 	.word	0x20000170
 800261c:	2000016c 	.word	0x2000016c
 8002620:	200001d4 	.word	0x200001d4

08002624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b04      	subs	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800263c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3b04      	subs	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f023 0201 	bic.w	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b04      	subs	r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002654:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <pxPortInitialiseStack+0x64>)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b14      	subs	r3, #20
 800265e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3b04      	subs	r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f06f 0202 	mvn.w	r2, #2
 8002672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b20      	subs	r3, #32
 8002678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	0800268d 	.word	0x0800268d

0800268c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <prvTaskExitError+0x54>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d00a      	beq.n	80026b6 <prvTaskExitError+0x2a>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	60fb      	str	r3, [r7, #12]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <prvTaskExitError+0x28>
	__asm volatile
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	60bb      	str	r3, [r7, #8]
}
 80026c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026ca:	bf00      	nop
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0fc      	beq.n	80026cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	20000010 	.word	0x20000010
	...

080026f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <pxCurrentTCBConst2>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	6808      	ldr	r0, [r1, #0]
 80026f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026fa:	f380 8809 	msr	PSP, r0
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f04f 0000 	mov.w	r0, #0
 8002706:	f380 8811 	msr	BASEPRI, r0
 800270a:	4770      	bx	lr
 800270c:	f3af 8000 	nop.w

08002710 <pxCurrentTCBConst2>:
 8002710:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop

08002718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002718:	4808      	ldr	r0, [pc, #32]	; (800273c <prvPortStartFirstTask+0x24>)
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	f380 8808 	msr	MSP, r0
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f380 8814 	msr	CONTROL, r0
 800272a:	b662      	cpsie	i
 800272c:	b661      	cpsie	f
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	df00      	svc	0
 8002738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800273a:	bf00      	nop
 800273c:	e000ed08 	.word	0xe000ed08

08002740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <xPortStartScheduler+0x120>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a46      	ldr	r2, [pc, #280]	; (8002864 <xPortStartScheduler+0x124>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10a      	bne.n	8002766 <xPortStartScheduler+0x26>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	613b      	str	r3, [r7, #16]
}
 8002762:	bf00      	nop
 8002764:	e7fe      	b.n	8002764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <xPortStartScheduler+0x120>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a3f      	ldr	r2, [pc, #252]	; (8002868 <xPortStartScheduler+0x128>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10a      	bne.n	8002786 <xPortStartScheduler+0x46>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	60fb      	str	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	e7fe      	b.n	8002784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <xPortStartScheduler+0x12c>)
 8002788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	22ff      	movs	r2, #255	; 0xff
 8002796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <xPortStartScheduler+0x130>)
 80027ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <xPortStartScheduler+0x134>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027b4:	e009      	b.n	80027ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <xPortStartScheduler+0x134>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <xPortStartScheduler+0x134>)
 80027be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d0ef      	beq.n	80027b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <xPortStartScheduler+0x134>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00a      	beq.n	80027f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	60bb      	str	r3, [r7, #8]
}
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <xPortStartScheduler+0x134>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <xPortStartScheduler+0x134>)
 8002800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <xPortStartScheduler+0x134>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <xPortStartScheduler+0x134>)
 800280c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <xPortStartScheduler+0x138>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <xPortStartScheduler+0x138>)
 800281c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <xPortStartScheduler+0x138>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <xPortStartScheduler+0x138>)
 8002828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800282c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800282e:	f000 f8dd 	bl	80029ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <xPortStartScheduler+0x13c>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002838:	f000 f8fc 	bl	8002a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <xPortStartScheduler+0x140>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <xPortStartScheduler+0x140>)
 8002842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002848:	f7ff ff66 	bl	8002718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800284c:	f7ff fd54 	bl	80022f8 <vTaskSwitchContext>
	prvTaskExitError();
 8002850:	f7ff ff1c 	bl	800268c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00
 8002864:	410fc271 	.word	0x410fc271
 8002868:	410fc270 	.word	0x410fc270
 800286c:	e000e400 	.word	0xe000e400
 8002870:	200001e0 	.word	0x200001e0
 8002874:	200001e4 	.word	0x200001e4
 8002878:	e000ed20 	.word	0xe000ed20
 800287c:	20000010 	.word	0x20000010
 8002880:	e000ef34 	.word	0xe000ef34

08002884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	607b      	str	r3, [r7, #4]
}
 800289c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <vPortEnterCritical+0x58>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <vPortEnterCritical+0x58>)
 80028a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <vPortEnterCritical+0x58>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10f      	bne.n	80028d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <vPortEnterCritical+0x5c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	603b      	str	r3, [r7, #0]
}
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <vPortEnterCritical+0x4a>
	}
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	20000010 	.word	0x20000010
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <vPortExitCritical+0x50>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <vPortExitCritical+0x24>
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	607b      	str	r3, [r7, #4]
}
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <vPortExitCritical+0x50>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <vPortExitCritical+0x50>)
 8002910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <vPortExitCritical+0x50>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <vPortExitCritical+0x42>
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000010 	.word	0x20000010
	...

08002940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002940:	f3ef 8009 	mrs	r0, PSP
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <pxCurrentTCBConst>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f01e 0f10 	tst.w	lr, #16
 8002950:	bf08      	it	eq
 8002952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	6010      	str	r0, [r2, #0]
 800295c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002964:	f380 8811 	msr	BASEPRI, r0
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f7ff fcc2 	bl	80022f8 <vTaskSwitchContext>
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f380 8811 	msr	BASEPRI, r0
 800297c:	bc09      	pop	{r0, r3}
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	6808      	ldr	r0, [r1, #0]
 8002982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002986:	f01e 0f10 	tst.w	lr, #16
 800298a:	bf08      	it	eq
 800298c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002990:	f380 8809 	msr	PSP, r0
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w

080029a0 <pxCurrentTCBConst>:
 80029a0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop

080029a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	607b      	str	r3, [r7, #4]
}
 80029c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029c2:	f7ff fbe1 	bl	8002188 <xTaskIncrementTick>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <xPortSysTickHandler+0x40>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f383 8811 	msr	BASEPRI, r3
}
 80029de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <vPortSetupTimerInterrupt+0x34>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <vPortSetupTimerInterrupt+0x38>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <vPortSetupTimerInterrupt+0x3c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <vPortSetupTimerInterrupt+0x40>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <vPortSetupTimerInterrupt+0x44>)
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <vPortSetupTimerInterrupt+0x34>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010
 8002a24:	e000e018 	.word	0xe000e018
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	10624dd3 	.word	0x10624dd3
 8002a30:	e000e014 	.word	0xe000e014

08002a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a44 <vPortEnableVFP+0x10>
 8002a38:	6801      	ldr	r1, [r0, #0]
 8002a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a3e:	6001      	str	r1, [r0, #0]
 8002a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002a42:	bf00      	nop
 8002a44:	e000ed88 	.word	0xe000ed88

08002a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a54:	f7ff faee 	bl	8002034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a58:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <pvPortMalloc+0x180>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a60:	f000 f920 	bl	8002ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <pvPortMalloc+0x184>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 8093 	bne.w	8002b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01d      	beq.n	8002ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002a78:	2208      	movs	r2, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d014      	beq.n	8002ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f023 0307 	bic.w	r3, r3, #7
 8002a90:	3308      	adds	r3, #8
 8002a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	617b      	str	r3, [r7, #20]
}
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d06e      	beq.n	8002b98 <pvPortMalloc+0x150>
 8002aba:	4b45      	ldr	r3, [pc, #276]	; (8002bd0 <pvPortMalloc+0x188>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d869      	bhi.n	8002b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ac4:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <pvPortMalloc+0x18c>)
 8002ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <pvPortMalloc+0x18c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ace:	e004      	b.n	8002ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d903      	bls.n	8002aec <pvPortMalloc+0xa4>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f1      	bne.n	8002ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <pvPortMalloc+0x180>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d050      	beq.n	8002b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2208      	movs	r2, #8
 8002afc:	4413      	add	r3, r2
 8002afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	2308      	movs	r3, #8
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d91f      	bls.n	8002b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <pvPortMalloc+0xf8>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	613b      	str	r3, [r7, #16]
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad2      	subs	r2, r2, r3
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b52:	69b8      	ldr	r0, [r7, #24]
 8002b54:	f000 f908 	bl	8002d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <pvPortMalloc+0x188>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <pvPortMalloc+0x188>)
 8002b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <pvPortMalloc+0x188>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <pvPortMalloc+0x190>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d203      	bcs.n	8002b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <pvPortMalloc+0x188>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <pvPortMalloc+0x190>)
 8002b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <pvPortMalloc+0x184>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <pvPortMalloc+0x194>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3301      	adds	r3, #1
 8002b94:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <pvPortMalloc+0x194>)
 8002b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b98:	f7ff fa5a 	bl	8002050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <pvPortMalloc+0x174>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	60fb      	str	r3, [r7, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <pvPortMalloc+0x172>
	return pvReturn;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000df0 	.word	0x20000df0
 8002bcc:	20000e04 	.word	0x20000e04
 8002bd0:	20000df4 	.word	0x20000df4
 8002bd4:	20000de8 	.word	0x20000de8
 8002bd8:	20000df8 	.word	0x20000df8
 8002bdc:	20000dfc 	.word	0x20000dfc

08002be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04d      	beq.n	8002c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <vPortFree+0xb8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <vPortFree+0x44>
	__asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	60fb      	str	r3, [r7, #12]
}
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <vPortFree+0x62>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	60bb      	str	r3, [r7, #8]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <vPortFree+0xb8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01e      	beq.n	8002c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11a      	bne.n	8002c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <vPortFree+0xb8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	401a      	ands	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c68:	f7ff f9e4 	bl	8002034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <vPortFree+0xbc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <vPortFree+0xbc>)
 8002c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c7a:	6938      	ldr	r0, [r7, #16]
 8002c7c:	f000 f874 	bl	8002d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <vPortFree+0xc0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <vPortFree+0xc0>)
 8002c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c8a:	f7ff f9e1 	bl	8002050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000e04 	.word	0x20000e04
 8002c9c:	20000df4 	.word	0x20000df4
 8002ca0:	20000e00 	.word	0x20000e00

08002ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002caa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002cb0:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <prvHeapInit+0xac>)
 8002cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00c      	beq.n	8002cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3307      	adds	r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0307 	bic.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <prvHeapInit+0xac>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <prvHeapInit+0xb0>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <prvHeapInit+0xb0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4413      	add	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0307 	bic.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <prvHeapInit+0xb4>)
 8002d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <prvHeapInit+0xb4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <prvHeapInit+0xb4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <prvHeapInit+0xb4>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <prvHeapInit+0xb8>)
 8002d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <prvHeapInit+0xbc>)
 8002d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <prvHeapInit+0xc0>)
 8002d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d42:	601a      	str	r2, [r3, #0]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	200001e8 	.word	0x200001e8
 8002d54:	20000de8 	.word	0x20000de8
 8002d58:	20000df0 	.word	0x20000df0
 8002d5c:	20000df8 	.word	0x20000df8
 8002d60:	20000df4 	.word	0x20000df4
 8002d64:	20000e04 	.word	0x20000e04

08002d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <prvInsertBlockIntoFreeList+0xac>)
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e002      	b.n	8002d7c <prvInsertBlockIntoFreeList+0x14>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d8f7      	bhi.n	8002d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d108      	bne.n	8002daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	441a      	add	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d118      	bne.n	8002df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <prvInsertBlockIntoFreeList+0xb0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d00d      	beq.n	8002de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e008      	b.n	8002df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <prvInsertBlockIntoFreeList+0xb0>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e003      	b.n	8002df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d002      	beq.n	8002e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000de8 	.word	0x20000de8
 8002e18:	20000df0 	.word	0x20000df0

08002e1c <__errno>:
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <__errno+0x8>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000014 	.word	0x20000014

08002e28 <__libc_init_array>:
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4d0d      	ldr	r5, [pc, #52]	; (8002e60 <__libc_init_array+0x38>)
 8002e2c:	4c0d      	ldr	r4, [pc, #52]	; (8002e64 <__libc_init_array+0x3c>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	2600      	movs	r6, #0
 8002e34:	42a6      	cmp	r6, r4
 8002e36:	d109      	bne.n	8002e4c <__libc_init_array+0x24>
 8002e38:	4d0b      	ldr	r5, [pc, #44]	; (8002e68 <__libc_init_array+0x40>)
 8002e3a:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x44>)
 8002e3c:	f001 f8ba 	bl	8003fb4 <_init>
 8002e40:	1b64      	subs	r4, r4, r5
 8002e42:	10a4      	asrs	r4, r4, #2
 8002e44:	2600      	movs	r6, #0
 8002e46:	42a6      	cmp	r6, r4
 8002e48:	d105      	bne.n	8002e56 <__libc_init_array+0x2e>
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e50:	4798      	blx	r3
 8002e52:	3601      	adds	r6, #1
 8002e54:	e7ee      	b.n	8002e34 <__libc_init_array+0xc>
 8002e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e5a:	4798      	blx	r3
 8002e5c:	3601      	adds	r6, #1
 8002e5e:	e7f2      	b.n	8002e46 <__libc_init_array+0x1e>
 8002e60:	0800418c 	.word	0x0800418c
 8002e64:	0800418c 	.word	0x0800418c
 8002e68:	0800418c 	.word	0x0800418c
 8002e6c:	08004190 	.word	0x08004190

08002e70 <memset>:
 8002e70:	4402      	add	r2, r0
 8002e72:	4603      	mov	r3, r0
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d100      	bne.n	8002e7a <memset+0xa>
 8002e78:	4770      	bx	lr
 8002e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7e:	e7f9      	b.n	8002e74 <memset+0x4>

08002e80 <srand>:
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <srand+0x44>)
 8002e84:	681d      	ldr	r5, [r3, #0]
 8002e86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002e88:	4604      	mov	r4, r0
 8002e8a:	b9b3      	cbnz	r3, 8002eba <srand+0x3a>
 8002e8c:	2018      	movs	r0, #24
 8002e8e:	f000 f8bf 	bl	8003010 <malloc>
 8002e92:	4602      	mov	r2, r0
 8002e94:	63a8      	str	r0, [r5, #56]	; 0x38
 8002e96:	b920      	cbnz	r0, 8002ea2 <srand+0x22>
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <srand+0x48>)
 8002e9a:	480c      	ldr	r0, [pc, #48]	; (8002ecc <srand+0x4c>)
 8002e9c:	2142      	movs	r1, #66	; 0x42
 8002e9e:	f000 f875 	bl	8002f8c <__assert_func>
 8002ea2:	490b      	ldr	r1, [pc, #44]	; (8002ed0 <srand+0x50>)
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <srand+0x54>)
 8002ea6:	e9c0 1300 	strd	r1, r3, [r0]
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <srand+0x58>)
 8002eac:	6083      	str	r3, [r0, #8]
 8002eae:	230b      	movs	r3, #11
 8002eb0:	8183      	strh	r3, [r0, #12]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002eba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611c      	str	r4, [r3, #16]
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	20000014 	.word	0x20000014
 8002ec8:	08004048 	.word	0x08004048
 8002ecc:	0800405f 	.word	0x0800405f
 8002ed0:	abcd330e 	.word	0xabcd330e
 8002ed4:	e66d1234 	.word	0xe66d1234
 8002ed8:	0005deec 	.word	0x0005deec

08002edc <rand>:
 8002edc:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <rand+0x5c>)
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	681c      	ldr	r4, [r3, #0]
 8002ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ee4:	b9b3      	cbnz	r3, 8002f14 <rand+0x38>
 8002ee6:	2018      	movs	r0, #24
 8002ee8:	f000 f892 	bl	8003010 <malloc>
 8002eec:	63a0      	str	r0, [r4, #56]	; 0x38
 8002eee:	b928      	cbnz	r0, 8002efc <rand+0x20>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <rand+0x60>)
 8002ef4:	4812      	ldr	r0, [pc, #72]	; (8002f40 <rand+0x64>)
 8002ef6:	214e      	movs	r1, #78	; 0x4e
 8002ef8:	f000 f848 	bl	8002f8c <__assert_func>
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <rand+0x68>)
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <rand+0x6c>)
 8002f00:	e9c0 2300 	strd	r2, r3, [r0]
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <rand+0x70>)
 8002f06:	6083      	str	r3, [r0, #8]
 8002f08:	230b      	movs	r3, #11
 8002f0a:	8183      	strh	r3, [r0, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002f14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <rand+0x74>)
 8002f18:	6920      	ldr	r0, [r4, #16]
 8002f1a:	6963      	ldr	r3, [r4, #20]
 8002f1c:	490d      	ldr	r1, [pc, #52]	; (8002f54 <rand+0x78>)
 8002f1e:	4342      	muls	r2, r0
 8002f20:	fb01 2203 	mla	r2, r1, r3, r2
 8002f24:	fba0 0101 	umull	r0, r1, r0, r1
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	eb42 0001 	adc.w	r0, r2, r1
 8002f2e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002f32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	20000014 	.word	0x20000014
 8002f3c:	08004048 	.word	0x08004048
 8002f40:	0800405f 	.word	0x0800405f
 8002f44:	abcd330e 	.word	0xabcd330e
 8002f48:	e66d1234 	.word	0xe66d1234
 8002f4c:	0005deec 	.word	0x0005deec
 8002f50:	5851f42d 	.word	0x5851f42d
 8002f54:	4c957f2d 	.word	0x4c957f2d

08002f58 <time>:
 8002f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <time+0x30>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4669      	mov	r1, sp
 8002f60:	4604      	mov	r4, r0
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	f000 f842 	bl	8002fec <_gettimeofday_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	bfbe      	ittt	lt
 8002f6c:	f04f 32ff 	movlt.w	r2, #4294967295
 8002f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f74:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f7c:	b10c      	cbz	r4, 8002f82 <time+0x2a>
 8002f7e:	e9c4 0100 	strd	r0, r1, [r4]
 8002f82:	b004      	add	sp, #16
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop
 8002f88:	20000014 	.word	0x20000014

08002f8c <__assert_func>:
 8002f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f8e:	4614      	mov	r4, r2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <__assert_func+0x2c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4605      	mov	r5, r0
 8002f98:	68d8      	ldr	r0, [r3, #12]
 8002f9a:	b14c      	cbz	r4, 8002fb0 <__assert_func+0x24>
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <__assert_func+0x30>)
 8002f9e:	9100      	str	r1, [sp, #0]
 8002fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002fa4:	4906      	ldr	r1, [pc, #24]	; (8002fc0 <__assert_func+0x34>)
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	f000 f80e 	bl	8002fc8 <fiprintf>
 8002fac:	f000 fcd6 	bl	800395c <abort>
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <__assert_func+0x38>)
 8002fb2:	461c      	mov	r4, r3
 8002fb4:	e7f3      	b.n	8002f9e <__assert_func+0x12>
 8002fb6:	bf00      	nop
 8002fb8:	20000014 	.word	0x20000014
 8002fbc:	080040ba 	.word	0x080040ba
 8002fc0:	080040c7 	.word	0x080040c7
 8002fc4:	080040f5 	.word	0x080040f5

08002fc8 <fiprintf>:
 8002fc8:	b40e      	push	{r1, r2, r3}
 8002fca:	b503      	push	{r0, r1, lr}
 8002fcc:	4601      	mov	r1, r0
 8002fce:	ab03      	add	r3, sp, #12
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <fiprintf+0x20>)
 8002fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	f000 f92b 	bl	8003234 <_vfiprintf_r>
 8002fde:	b002      	add	sp, #8
 8002fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fe4:	b003      	add	sp, #12
 8002fe6:	4770      	bx	lr
 8002fe8:	20000014 	.word	0x20000014

08002fec <_gettimeofday_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	; (800300c <_gettimeofday_r+0x20>)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	f000 ffd3 	bl	8003fa4 <_gettimeofday>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d102      	bne.n	8003008 <_gettimeofday_r+0x1c>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	b103      	cbz	r3, 8003008 <_gettimeofday_r+0x1c>
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	20000e10 	.word	0x20000e10

08003010 <malloc>:
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <malloc+0xc>)
 8003012:	4601      	mov	r1, r0
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f000 b86f 	b.w	80030f8 <_malloc_r>
 800301a:	bf00      	nop
 800301c:	20000014 	.word	0x20000014

08003020 <_free_r>:
 8003020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003022:	2900      	cmp	r1, #0
 8003024:	d044      	beq.n	80030b0 <_free_r+0x90>
 8003026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800302a:	9001      	str	r0, [sp, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f1a1 0404 	sub.w	r4, r1, #4
 8003032:	bfb8      	it	lt
 8003034:	18e4      	addlt	r4, r4, r3
 8003036:	f000 feb9 	bl	8003dac <__malloc_lock>
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <_free_r+0x94>)
 800303c:	9801      	ldr	r0, [sp, #4]
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	b933      	cbnz	r3, 8003050 <_free_r+0x30>
 8003042:	6063      	str	r3, [r4, #4]
 8003044:	6014      	str	r4, [r2, #0]
 8003046:	b003      	add	sp, #12
 8003048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800304c:	f000 beb4 	b.w	8003db8 <__malloc_unlock>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d908      	bls.n	8003066 <_free_r+0x46>
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	1961      	adds	r1, r4, r5
 8003058:	428b      	cmp	r3, r1
 800305a:	bf01      	itttt	eq
 800305c:	6819      	ldreq	r1, [r3, #0]
 800305e:	685b      	ldreq	r3, [r3, #4]
 8003060:	1949      	addeq	r1, r1, r5
 8003062:	6021      	streq	r1, [r4, #0]
 8003064:	e7ed      	b.n	8003042 <_free_r+0x22>
 8003066:	461a      	mov	r2, r3
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	b10b      	cbz	r3, 8003070 <_free_r+0x50>
 800306c:	42a3      	cmp	r3, r4
 800306e:	d9fa      	bls.n	8003066 <_free_r+0x46>
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	1855      	adds	r5, r2, r1
 8003074:	42a5      	cmp	r5, r4
 8003076:	d10b      	bne.n	8003090 <_free_r+0x70>
 8003078:	6824      	ldr	r4, [r4, #0]
 800307a:	4421      	add	r1, r4
 800307c:	1854      	adds	r4, r2, r1
 800307e:	42a3      	cmp	r3, r4
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	d1e0      	bne.n	8003046 <_free_r+0x26>
 8003084:	681c      	ldr	r4, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	6053      	str	r3, [r2, #4]
 800308a:	4421      	add	r1, r4
 800308c:	6011      	str	r1, [r2, #0]
 800308e:	e7da      	b.n	8003046 <_free_r+0x26>
 8003090:	d902      	bls.n	8003098 <_free_r+0x78>
 8003092:	230c      	movs	r3, #12
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	e7d6      	b.n	8003046 <_free_r+0x26>
 8003098:	6825      	ldr	r5, [r4, #0]
 800309a:	1961      	adds	r1, r4, r5
 800309c:	428b      	cmp	r3, r1
 800309e:	bf04      	itt	eq
 80030a0:	6819      	ldreq	r1, [r3, #0]
 80030a2:	685b      	ldreq	r3, [r3, #4]
 80030a4:	6063      	str	r3, [r4, #4]
 80030a6:	bf04      	itt	eq
 80030a8:	1949      	addeq	r1, r1, r5
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	6054      	str	r4, [r2, #4]
 80030ae:	e7ca      	b.n	8003046 <_free_r+0x26>
 80030b0:	b003      	add	sp, #12
 80030b2:	bd30      	pop	{r4, r5, pc}
 80030b4:	20000e08 	.word	0x20000e08

080030b8 <sbrk_aligned>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4e0e      	ldr	r6, [pc, #56]	; (80030f4 <sbrk_aligned+0x3c>)
 80030bc:	460c      	mov	r4, r1
 80030be:	6831      	ldr	r1, [r6, #0]
 80030c0:	4605      	mov	r5, r0
 80030c2:	b911      	cbnz	r1, 80030ca <sbrk_aligned+0x12>
 80030c4:	f000 fb7a 	bl	80037bc <_sbrk_r>
 80030c8:	6030      	str	r0, [r6, #0]
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 fb75 	bl	80037bc <_sbrk_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d00a      	beq.n	80030ec <sbrk_aligned+0x34>
 80030d6:	1cc4      	adds	r4, r0, #3
 80030d8:	f024 0403 	bic.w	r4, r4, #3
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d007      	beq.n	80030f0 <sbrk_aligned+0x38>
 80030e0:	1a21      	subs	r1, r4, r0
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 fb6a 	bl	80037bc <_sbrk_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	d101      	bne.n	80030f0 <sbrk_aligned+0x38>
 80030ec:	f04f 34ff 	mov.w	r4, #4294967295
 80030f0:	4620      	mov	r0, r4
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	20000e0c 	.word	0x20000e0c

080030f8 <_malloc_r>:
 80030f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fc:	1ccd      	adds	r5, r1, #3
 80030fe:	f025 0503 	bic.w	r5, r5, #3
 8003102:	3508      	adds	r5, #8
 8003104:	2d0c      	cmp	r5, #12
 8003106:	bf38      	it	cc
 8003108:	250c      	movcc	r5, #12
 800310a:	2d00      	cmp	r5, #0
 800310c:	4607      	mov	r7, r0
 800310e:	db01      	blt.n	8003114 <_malloc_r+0x1c>
 8003110:	42a9      	cmp	r1, r5
 8003112:	d905      	bls.n	8003120 <_malloc_r+0x28>
 8003114:	230c      	movs	r3, #12
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	2600      	movs	r6, #0
 800311a:	4630      	mov	r0, r6
 800311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003120:	4e2e      	ldr	r6, [pc, #184]	; (80031dc <_malloc_r+0xe4>)
 8003122:	f000 fe43 	bl	8003dac <__malloc_lock>
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	461c      	mov	r4, r3
 800312a:	bb34      	cbnz	r4, 800317a <_malloc_r+0x82>
 800312c:	4629      	mov	r1, r5
 800312e:	4638      	mov	r0, r7
 8003130:	f7ff ffc2 	bl	80030b8 <sbrk_aligned>
 8003134:	1c43      	adds	r3, r0, #1
 8003136:	4604      	mov	r4, r0
 8003138:	d14d      	bne.n	80031d6 <_malloc_r+0xde>
 800313a:	6834      	ldr	r4, [r6, #0]
 800313c:	4626      	mov	r6, r4
 800313e:	2e00      	cmp	r6, #0
 8003140:	d140      	bne.n	80031c4 <_malloc_r+0xcc>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	4631      	mov	r1, r6
 8003146:	4638      	mov	r0, r7
 8003148:	eb04 0803 	add.w	r8, r4, r3
 800314c:	f000 fb36 	bl	80037bc <_sbrk_r>
 8003150:	4580      	cmp	r8, r0
 8003152:	d13a      	bne.n	80031ca <_malloc_r+0xd2>
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	3503      	adds	r5, #3
 8003158:	1a6d      	subs	r5, r5, r1
 800315a:	f025 0503 	bic.w	r5, r5, #3
 800315e:	3508      	adds	r5, #8
 8003160:	2d0c      	cmp	r5, #12
 8003162:	bf38      	it	cc
 8003164:	250c      	movcc	r5, #12
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ffa5 	bl	80030b8 <sbrk_aligned>
 800316e:	3001      	adds	r0, #1
 8003170:	d02b      	beq.n	80031ca <_malloc_r+0xd2>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	442b      	add	r3, r5
 8003176:	6023      	str	r3, [r4, #0]
 8003178:	e00e      	b.n	8003198 <_malloc_r+0xa0>
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	1b52      	subs	r2, r2, r5
 800317e:	d41e      	bmi.n	80031be <_malloc_r+0xc6>
 8003180:	2a0b      	cmp	r2, #11
 8003182:	d916      	bls.n	80031b2 <_malloc_r+0xba>
 8003184:	1961      	adds	r1, r4, r5
 8003186:	42a3      	cmp	r3, r4
 8003188:	6025      	str	r5, [r4, #0]
 800318a:	bf18      	it	ne
 800318c:	6059      	strne	r1, [r3, #4]
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	bf08      	it	eq
 8003192:	6031      	streq	r1, [r6, #0]
 8003194:	5162      	str	r2, [r4, r5]
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	4638      	mov	r0, r7
 800319a:	f104 060b 	add.w	r6, r4, #11
 800319e:	f000 fe0b 	bl	8003db8 <__malloc_unlock>
 80031a2:	f026 0607 	bic.w	r6, r6, #7
 80031a6:	1d23      	adds	r3, r4, #4
 80031a8:	1af2      	subs	r2, r6, r3
 80031aa:	d0b6      	beq.n	800311a <_malloc_r+0x22>
 80031ac:	1b9b      	subs	r3, r3, r6
 80031ae:	50a3      	str	r3, [r4, r2]
 80031b0:	e7b3      	b.n	800311a <_malloc_r+0x22>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	bf0c      	ite	eq
 80031b8:	6032      	streq	r2, [r6, #0]
 80031ba:	605a      	strne	r2, [r3, #4]
 80031bc:	e7ec      	b.n	8003198 <_malloc_r+0xa0>
 80031be:	4623      	mov	r3, r4
 80031c0:	6864      	ldr	r4, [r4, #4]
 80031c2:	e7b2      	b.n	800312a <_malloc_r+0x32>
 80031c4:	4634      	mov	r4, r6
 80031c6:	6876      	ldr	r6, [r6, #4]
 80031c8:	e7b9      	b.n	800313e <_malloc_r+0x46>
 80031ca:	230c      	movs	r3, #12
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4638      	mov	r0, r7
 80031d0:	f000 fdf2 	bl	8003db8 <__malloc_unlock>
 80031d4:	e7a1      	b.n	800311a <_malloc_r+0x22>
 80031d6:	6025      	str	r5, [r4, #0]
 80031d8:	e7de      	b.n	8003198 <_malloc_r+0xa0>
 80031da:	bf00      	nop
 80031dc:	20000e08 	.word	0x20000e08

080031e0 <__sfputc_r>:
 80031e0:	6893      	ldr	r3, [r2, #8]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	b410      	push	{r4}
 80031e8:	6093      	str	r3, [r2, #8]
 80031ea:	da08      	bge.n	80031fe <__sfputc_r+0x1e>
 80031ec:	6994      	ldr	r4, [r2, #24]
 80031ee:	42a3      	cmp	r3, r4
 80031f0:	db01      	blt.n	80031f6 <__sfputc_r+0x16>
 80031f2:	290a      	cmp	r1, #10
 80031f4:	d103      	bne.n	80031fe <__sfputc_r+0x1e>
 80031f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031fa:	f000 baef 	b.w	80037dc <__swbuf_r>
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	1c58      	adds	r0, r3, #1
 8003202:	6010      	str	r0, [r2, #0]
 8003204:	7019      	strb	r1, [r3, #0]
 8003206:	4608      	mov	r0, r1
 8003208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800320c:	4770      	bx	lr

0800320e <__sfputs_r>:
 800320e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003210:	4606      	mov	r6, r0
 8003212:	460f      	mov	r7, r1
 8003214:	4614      	mov	r4, r2
 8003216:	18d5      	adds	r5, r2, r3
 8003218:	42ac      	cmp	r4, r5
 800321a:	d101      	bne.n	8003220 <__sfputs_r+0x12>
 800321c:	2000      	movs	r0, #0
 800321e:	e007      	b.n	8003230 <__sfputs_r+0x22>
 8003220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003224:	463a      	mov	r2, r7
 8003226:	4630      	mov	r0, r6
 8003228:	f7ff ffda 	bl	80031e0 <__sfputc_r>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d1f3      	bne.n	8003218 <__sfputs_r+0xa>
 8003230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003234 <_vfiprintf_r>:
 8003234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003238:	460d      	mov	r5, r1
 800323a:	b09d      	sub	sp, #116	; 0x74
 800323c:	4614      	mov	r4, r2
 800323e:	4698      	mov	r8, r3
 8003240:	4606      	mov	r6, r0
 8003242:	b118      	cbz	r0, 800324c <_vfiprintf_r+0x18>
 8003244:	6983      	ldr	r3, [r0, #24]
 8003246:	b90b      	cbnz	r3, 800324c <_vfiprintf_r+0x18>
 8003248:	f000 fcaa 	bl	8003ba0 <__sinit>
 800324c:	4b89      	ldr	r3, [pc, #548]	; (8003474 <_vfiprintf_r+0x240>)
 800324e:	429d      	cmp	r5, r3
 8003250:	d11b      	bne.n	800328a <_vfiprintf_r+0x56>
 8003252:	6875      	ldr	r5, [r6, #4]
 8003254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003256:	07d9      	lsls	r1, r3, #31
 8003258:	d405      	bmi.n	8003266 <_vfiprintf_r+0x32>
 800325a:	89ab      	ldrh	r3, [r5, #12]
 800325c:	059a      	lsls	r2, r3, #22
 800325e:	d402      	bmi.n	8003266 <_vfiprintf_r+0x32>
 8003260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003262:	f000 fd3b 	bl	8003cdc <__retarget_lock_acquire_recursive>
 8003266:	89ab      	ldrh	r3, [r5, #12]
 8003268:	071b      	lsls	r3, r3, #28
 800326a:	d501      	bpl.n	8003270 <_vfiprintf_r+0x3c>
 800326c:	692b      	ldr	r3, [r5, #16]
 800326e:	b9eb      	cbnz	r3, 80032ac <_vfiprintf_r+0x78>
 8003270:	4629      	mov	r1, r5
 8003272:	4630      	mov	r0, r6
 8003274:	f000 fb04 	bl	8003880 <__swsetup_r>
 8003278:	b1c0      	cbz	r0, 80032ac <_vfiprintf_r+0x78>
 800327a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800327c:	07dc      	lsls	r4, r3, #31
 800327e:	d50e      	bpl.n	800329e <_vfiprintf_r+0x6a>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	b01d      	add	sp, #116	; 0x74
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <_vfiprintf_r+0x244>)
 800328c:	429d      	cmp	r5, r3
 800328e:	d101      	bne.n	8003294 <_vfiprintf_r+0x60>
 8003290:	68b5      	ldr	r5, [r6, #8]
 8003292:	e7df      	b.n	8003254 <_vfiprintf_r+0x20>
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <_vfiprintf_r+0x248>)
 8003296:	429d      	cmp	r5, r3
 8003298:	bf08      	it	eq
 800329a:	68f5      	ldreq	r5, [r6, #12]
 800329c:	e7da      	b.n	8003254 <_vfiprintf_r+0x20>
 800329e:	89ab      	ldrh	r3, [r5, #12]
 80032a0:	0598      	lsls	r0, r3, #22
 80032a2:	d4ed      	bmi.n	8003280 <_vfiprintf_r+0x4c>
 80032a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032a6:	f000 fd1a 	bl	8003cde <__retarget_lock_release_recursive>
 80032aa:	e7e9      	b.n	8003280 <_vfiprintf_r+0x4c>
 80032ac:	2300      	movs	r3, #0
 80032ae:	9309      	str	r3, [sp, #36]	; 0x24
 80032b0:	2320      	movs	r3, #32
 80032b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80032ba:	2330      	movs	r3, #48	; 0x30
 80032bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003480 <_vfiprintf_r+0x24c>
 80032c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032c4:	f04f 0901 	mov.w	r9, #1
 80032c8:	4623      	mov	r3, r4
 80032ca:	469a      	mov	sl, r3
 80032cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d0:	b10a      	cbz	r2, 80032d6 <_vfiprintf_r+0xa2>
 80032d2:	2a25      	cmp	r2, #37	; 0x25
 80032d4:	d1f9      	bne.n	80032ca <_vfiprintf_r+0x96>
 80032d6:	ebba 0b04 	subs.w	fp, sl, r4
 80032da:	d00b      	beq.n	80032f4 <_vfiprintf_r+0xc0>
 80032dc:	465b      	mov	r3, fp
 80032de:	4622      	mov	r2, r4
 80032e0:	4629      	mov	r1, r5
 80032e2:	4630      	mov	r0, r6
 80032e4:	f7ff ff93 	bl	800320e <__sfputs_r>
 80032e8:	3001      	adds	r0, #1
 80032ea:	f000 80aa 	beq.w	8003442 <_vfiprintf_r+0x20e>
 80032ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f0:	445a      	add	r2, fp
 80032f2:	9209      	str	r2, [sp, #36]	; 0x24
 80032f4:	f89a 3000 	ldrb.w	r3, [sl]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a2 	beq.w	8003442 <_vfiprintf_r+0x20e>
 80032fe:	2300      	movs	r3, #0
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003308:	f10a 0a01 	add.w	sl, sl, #1
 800330c:	9304      	str	r3, [sp, #16]
 800330e:	9307      	str	r3, [sp, #28]
 8003310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003314:	931a      	str	r3, [sp, #104]	; 0x68
 8003316:	4654      	mov	r4, sl
 8003318:	2205      	movs	r2, #5
 800331a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800331e:	4858      	ldr	r0, [pc, #352]	; (8003480 <_vfiprintf_r+0x24c>)
 8003320:	f7fc ff7e 	bl	8000220 <memchr>
 8003324:	9a04      	ldr	r2, [sp, #16]
 8003326:	b9d8      	cbnz	r0, 8003360 <_vfiprintf_r+0x12c>
 8003328:	06d1      	lsls	r1, r2, #27
 800332a:	bf44      	itt	mi
 800332c:	2320      	movmi	r3, #32
 800332e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003332:	0713      	lsls	r3, r2, #28
 8003334:	bf44      	itt	mi
 8003336:	232b      	movmi	r3, #43	; 0x2b
 8003338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800333c:	f89a 3000 	ldrb.w	r3, [sl]
 8003340:	2b2a      	cmp	r3, #42	; 0x2a
 8003342:	d015      	beq.n	8003370 <_vfiprintf_r+0x13c>
 8003344:	9a07      	ldr	r2, [sp, #28]
 8003346:	4654      	mov	r4, sl
 8003348:	2000      	movs	r0, #0
 800334a:	f04f 0c0a 	mov.w	ip, #10
 800334e:	4621      	mov	r1, r4
 8003350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003354:	3b30      	subs	r3, #48	; 0x30
 8003356:	2b09      	cmp	r3, #9
 8003358:	d94e      	bls.n	80033f8 <_vfiprintf_r+0x1c4>
 800335a:	b1b0      	cbz	r0, 800338a <_vfiprintf_r+0x156>
 800335c:	9207      	str	r2, [sp, #28]
 800335e:	e014      	b.n	800338a <_vfiprintf_r+0x156>
 8003360:	eba0 0308 	sub.w	r3, r0, r8
 8003364:	fa09 f303 	lsl.w	r3, r9, r3
 8003368:	4313      	orrs	r3, r2
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	46a2      	mov	sl, r4
 800336e:	e7d2      	b.n	8003316 <_vfiprintf_r+0xe2>
 8003370:	9b03      	ldr	r3, [sp, #12]
 8003372:	1d19      	adds	r1, r3, #4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	9103      	str	r1, [sp, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	bfbb      	ittet	lt
 800337c:	425b      	neglt	r3, r3
 800337e:	f042 0202 	orrlt.w	r2, r2, #2
 8003382:	9307      	strge	r3, [sp, #28]
 8003384:	9307      	strlt	r3, [sp, #28]
 8003386:	bfb8      	it	lt
 8003388:	9204      	strlt	r2, [sp, #16]
 800338a:	7823      	ldrb	r3, [r4, #0]
 800338c:	2b2e      	cmp	r3, #46	; 0x2e
 800338e:	d10c      	bne.n	80033aa <_vfiprintf_r+0x176>
 8003390:	7863      	ldrb	r3, [r4, #1]
 8003392:	2b2a      	cmp	r3, #42	; 0x2a
 8003394:	d135      	bne.n	8003402 <_vfiprintf_r+0x1ce>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	1d1a      	adds	r2, r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	9203      	str	r2, [sp, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80033a6:	3402      	adds	r4, #2
 80033a8:	9305      	str	r3, [sp, #20]
 80033aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003490 <_vfiprintf_r+0x25c>
 80033ae:	7821      	ldrb	r1, [r4, #0]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4650      	mov	r0, sl
 80033b4:	f7fc ff34 	bl	8000220 <memchr>
 80033b8:	b140      	cbz	r0, 80033cc <_vfiprintf_r+0x198>
 80033ba:	2340      	movs	r3, #64	; 0x40
 80033bc:	eba0 000a 	sub.w	r0, r0, sl
 80033c0:	fa03 f000 	lsl.w	r0, r3, r0
 80033c4:	9b04      	ldr	r3, [sp, #16]
 80033c6:	4303      	orrs	r3, r0
 80033c8:	3401      	adds	r4, #1
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d0:	482c      	ldr	r0, [pc, #176]	; (8003484 <_vfiprintf_r+0x250>)
 80033d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033d6:	2206      	movs	r2, #6
 80033d8:	f7fc ff22 	bl	8000220 <memchr>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d03f      	beq.n	8003460 <_vfiprintf_r+0x22c>
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <_vfiprintf_r+0x254>)
 80033e2:	bb1b      	cbnz	r3, 800342c <_vfiprintf_r+0x1f8>
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	3307      	adds	r3, #7
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	3308      	adds	r3, #8
 80033ee:	9303      	str	r3, [sp, #12]
 80033f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f2:	443b      	add	r3, r7
 80033f4:	9309      	str	r3, [sp, #36]	; 0x24
 80033f6:	e767      	b.n	80032c8 <_vfiprintf_r+0x94>
 80033f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80033fc:	460c      	mov	r4, r1
 80033fe:	2001      	movs	r0, #1
 8003400:	e7a5      	b.n	800334e <_vfiprintf_r+0x11a>
 8003402:	2300      	movs	r3, #0
 8003404:	3401      	adds	r4, #1
 8003406:	9305      	str	r3, [sp, #20]
 8003408:	4619      	mov	r1, r3
 800340a:	f04f 0c0a 	mov.w	ip, #10
 800340e:	4620      	mov	r0, r4
 8003410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003414:	3a30      	subs	r2, #48	; 0x30
 8003416:	2a09      	cmp	r2, #9
 8003418:	d903      	bls.n	8003422 <_vfiprintf_r+0x1ee>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0c5      	beq.n	80033aa <_vfiprintf_r+0x176>
 800341e:	9105      	str	r1, [sp, #20]
 8003420:	e7c3      	b.n	80033aa <_vfiprintf_r+0x176>
 8003422:	fb0c 2101 	mla	r1, ip, r1, r2
 8003426:	4604      	mov	r4, r0
 8003428:	2301      	movs	r3, #1
 800342a:	e7f0      	b.n	800340e <_vfiprintf_r+0x1da>
 800342c:	ab03      	add	r3, sp, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	462a      	mov	r2, r5
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <_vfiprintf_r+0x258>)
 8003434:	a904      	add	r1, sp, #16
 8003436:	4630      	mov	r0, r6
 8003438:	f3af 8000 	nop.w
 800343c:	4607      	mov	r7, r0
 800343e:	1c78      	adds	r0, r7, #1
 8003440:	d1d6      	bne.n	80033f0 <_vfiprintf_r+0x1bc>
 8003442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003444:	07d9      	lsls	r1, r3, #31
 8003446:	d405      	bmi.n	8003454 <_vfiprintf_r+0x220>
 8003448:	89ab      	ldrh	r3, [r5, #12]
 800344a:	059a      	lsls	r2, r3, #22
 800344c:	d402      	bmi.n	8003454 <_vfiprintf_r+0x220>
 800344e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003450:	f000 fc45 	bl	8003cde <__retarget_lock_release_recursive>
 8003454:	89ab      	ldrh	r3, [r5, #12]
 8003456:	065b      	lsls	r3, r3, #25
 8003458:	f53f af12 	bmi.w	8003280 <_vfiprintf_r+0x4c>
 800345c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800345e:	e711      	b.n	8003284 <_vfiprintf_r+0x50>
 8003460:	ab03      	add	r3, sp, #12
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	462a      	mov	r2, r5
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <_vfiprintf_r+0x258>)
 8003468:	a904      	add	r1, sp, #16
 800346a:	4630      	mov	r0, r6
 800346c:	f000 f880 	bl	8003570 <_printf_i>
 8003470:	e7e4      	b.n	800343c <_vfiprintf_r+0x208>
 8003472:	bf00      	nop
 8003474:	0800414c 	.word	0x0800414c
 8003478:	0800416c 	.word	0x0800416c
 800347c:	0800412c 	.word	0x0800412c
 8003480:	080040f6 	.word	0x080040f6
 8003484:	08004100 	.word	0x08004100
 8003488:	00000000 	.word	0x00000000
 800348c:	0800320f 	.word	0x0800320f
 8003490:	080040fc 	.word	0x080040fc

08003494 <_printf_common>:
 8003494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	4616      	mov	r6, r2
 800349a:	4699      	mov	r9, r3
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bfb8      	it	lt
 80034a8:	4613      	movlt	r3, r2
 80034aa:	6033      	str	r3, [r6, #0]
 80034ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034b0:	4607      	mov	r7, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	b10a      	cbz	r2, 80034ba <_printf_common+0x26>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0699      	lsls	r1, r3, #26
 80034be:	bf42      	ittt	mi
 80034c0:	6833      	ldrmi	r3, [r6, #0]
 80034c2:	3302      	addmi	r3, #2
 80034c4:	6033      	strmi	r3, [r6, #0]
 80034c6:	6825      	ldr	r5, [r4, #0]
 80034c8:	f015 0506 	ands.w	r5, r5, #6
 80034cc:	d106      	bne.n	80034dc <_printf_common+0x48>
 80034ce:	f104 0a19 	add.w	sl, r4, #25
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	6832      	ldr	r2, [r6, #0]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dc26      	bgt.n	800352a <_printf_common+0x96>
 80034dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034e0:	1e13      	subs	r3, r2, #0
 80034e2:	6822      	ldr	r2, [r4, #0]
 80034e4:	bf18      	it	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	0692      	lsls	r2, r2, #26
 80034ea:	d42b      	bmi.n	8003544 <_printf_common+0xb0>
 80034ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034f0:	4649      	mov	r1, r9
 80034f2:	4638      	mov	r0, r7
 80034f4:	47c0      	blx	r8
 80034f6:	3001      	adds	r0, #1
 80034f8:	d01e      	beq.n	8003538 <_printf_common+0xa4>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	68e5      	ldr	r5, [r4, #12]
 80034fe:	6832      	ldr	r2, [r6, #0]
 8003500:	f003 0306 	and.w	r3, r3, #6
 8003504:	2b04      	cmp	r3, #4
 8003506:	bf08      	it	eq
 8003508:	1aad      	subeq	r5, r5, r2
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	bf0c      	ite	eq
 8003510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003514:	2500      	movne	r5, #0
 8003516:	4293      	cmp	r3, r2
 8003518:	bfc4      	itt	gt
 800351a:	1a9b      	subgt	r3, r3, r2
 800351c:	18ed      	addgt	r5, r5, r3
 800351e:	2600      	movs	r6, #0
 8003520:	341a      	adds	r4, #26
 8003522:	42b5      	cmp	r5, r6
 8003524:	d11a      	bne.n	800355c <_printf_common+0xc8>
 8003526:	2000      	movs	r0, #0
 8003528:	e008      	b.n	800353c <_printf_common+0xa8>
 800352a:	2301      	movs	r3, #1
 800352c:	4652      	mov	r2, sl
 800352e:	4649      	mov	r1, r9
 8003530:	4638      	mov	r0, r7
 8003532:	47c0      	blx	r8
 8003534:	3001      	adds	r0, #1
 8003536:	d103      	bne.n	8003540 <_printf_common+0xac>
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	3501      	adds	r5, #1
 8003542:	e7c6      	b.n	80034d2 <_printf_common+0x3e>
 8003544:	18e1      	adds	r1, r4, r3
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	2030      	movs	r0, #48	; 0x30
 800354a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800354e:	4422      	add	r2, r4
 8003550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003558:	3302      	adds	r3, #2
 800355a:	e7c7      	b.n	80034ec <_printf_common+0x58>
 800355c:	2301      	movs	r3, #1
 800355e:	4622      	mov	r2, r4
 8003560:	4649      	mov	r1, r9
 8003562:	4638      	mov	r0, r7
 8003564:	47c0      	blx	r8
 8003566:	3001      	adds	r0, #1
 8003568:	d0e6      	beq.n	8003538 <_printf_common+0xa4>
 800356a:	3601      	adds	r6, #1
 800356c:	e7d9      	b.n	8003522 <_printf_common+0x8e>
	...

08003570 <_printf_i>:
 8003570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003574:	7e0f      	ldrb	r7, [r1, #24]
 8003576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003578:	2f78      	cmp	r7, #120	; 0x78
 800357a:	4691      	mov	r9, r2
 800357c:	4680      	mov	r8, r0
 800357e:	460c      	mov	r4, r1
 8003580:	469a      	mov	sl, r3
 8003582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003586:	d807      	bhi.n	8003598 <_printf_i+0x28>
 8003588:	2f62      	cmp	r7, #98	; 0x62
 800358a:	d80a      	bhi.n	80035a2 <_printf_i+0x32>
 800358c:	2f00      	cmp	r7, #0
 800358e:	f000 80d8 	beq.w	8003742 <_printf_i+0x1d2>
 8003592:	2f58      	cmp	r7, #88	; 0x58
 8003594:	f000 80a3 	beq.w	80036de <_printf_i+0x16e>
 8003598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800359c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035a0:	e03a      	b.n	8003618 <_printf_i+0xa8>
 80035a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035a6:	2b15      	cmp	r3, #21
 80035a8:	d8f6      	bhi.n	8003598 <_printf_i+0x28>
 80035aa:	a101      	add	r1, pc, #4	; (adr r1, 80035b0 <_printf_i+0x40>)
 80035ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b0:	08003609 	.word	0x08003609
 80035b4:	0800361d 	.word	0x0800361d
 80035b8:	08003599 	.word	0x08003599
 80035bc:	08003599 	.word	0x08003599
 80035c0:	08003599 	.word	0x08003599
 80035c4:	08003599 	.word	0x08003599
 80035c8:	0800361d 	.word	0x0800361d
 80035cc:	08003599 	.word	0x08003599
 80035d0:	08003599 	.word	0x08003599
 80035d4:	08003599 	.word	0x08003599
 80035d8:	08003599 	.word	0x08003599
 80035dc:	08003729 	.word	0x08003729
 80035e0:	0800364d 	.word	0x0800364d
 80035e4:	0800370b 	.word	0x0800370b
 80035e8:	08003599 	.word	0x08003599
 80035ec:	08003599 	.word	0x08003599
 80035f0:	0800374b 	.word	0x0800374b
 80035f4:	08003599 	.word	0x08003599
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	08003599 	.word	0x08003599
 8003600:	08003599 	.word	0x08003599
 8003604:	08003713 	.word	0x08003713
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	602a      	str	r2, [r5, #0]
 8003610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003618:	2301      	movs	r3, #1
 800361a:	e0a3      	b.n	8003764 <_printf_i+0x1f4>
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	6829      	ldr	r1, [r5, #0]
 8003620:	0606      	lsls	r6, r0, #24
 8003622:	f101 0304 	add.w	r3, r1, #4
 8003626:	d50a      	bpl.n	800363e <_printf_i+0xce>
 8003628:	680e      	ldr	r6, [r1, #0]
 800362a:	602b      	str	r3, [r5, #0]
 800362c:	2e00      	cmp	r6, #0
 800362e:	da03      	bge.n	8003638 <_printf_i+0xc8>
 8003630:	232d      	movs	r3, #45	; 0x2d
 8003632:	4276      	negs	r6, r6
 8003634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003638:	485e      	ldr	r0, [pc, #376]	; (80037b4 <_printf_i+0x244>)
 800363a:	230a      	movs	r3, #10
 800363c:	e019      	b.n	8003672 <_printf_i+0x102>
 800363e:	680e      	ldr	r6, [r1, #0]
 8003640:	602b      	str	r3, [r5, #0]
 8003642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003646:	bf18      	it	ne
 8003648:	b236      	sxthne	r6, r6
 800364a:	e7ef      	b.n	800362c <_printf_i+0xbc>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	1d19      	adds	r1, r3, #4
 8003652:	6029      	str	r1, [r5, #0]
 8003654:	0601      	lsls	r1, r0, #24
 8003656:	d501      	bpl.n	800365c <_printf_i+0xec>
 8003658:	681e      	ldr	r6, [r3, #0]
 800365a:	e002      	b.n	8003662 <_printf_i+0xf2>
 800365c:	0646      	lsls	r6, r0, #25
 800365e:	d5fb      	bpl.n	8003658 <_printf_i+0xe8>
 8003660:	881e      	ldrh	r6, [r3, #0]
 8003662:	4854      	ldr	r0, [pc, #336]	; (80037b4 <_printf_i+0x244>)
 8003664:	2f6f      	cmp	r7, #111	; 0x6f
 8003666:	bf0c      	ite	eq
 8003668:	2308      	moveq	r3, #8
 800366a:	230a      	movne	r3, #10
 800366c:	2100      	movs	r1, #0
 800366e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003672:	6865      	ldr	r5, [r4, #4]
 8003674:	60a5      	str	r5, [r4, #8]
 8003676:	2d00      	cmp	r5, #0
 8003678:	bfa2      	ittt	ge
 800367a:	6821      	ldrge	r1, [r4, #0]
 800367c:	f021 0104 	bicge.w	r1, r1, #4
 8003680:	6021      	strge	r1, [r4, #0]
 8003682:	b90e      	cbnz	r6, 8003688 <_printf_i+0x118>
 8003684:	2d00      	cmp	r5, #0
 8003686:	d04d      	beq.n	8003724 <_printf_i+0x1b4>
 8003688:	4615      	mov	r5, r2
 800368a:	fbb6 f1f3 	udiv	r1, r6, r3
 800368e:	fb03 6711 	mls	r7, r3, r1, r6
 8003692:	5dc7      	ldrb	r7, [r0, r7]
 8003694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003698:	4637      	mov	r7, r6
 800369a:	42bb      	cmp	r3, r7
 800369c:	460e      	mov	r6, r1
 800369e:	d9f4      	bls.n	800368a <_printf_i+0x11a>
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d10b      	bne.n	80036bc <_printf_i+0x14c>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	07de      	lsls	r6, r3, #31
 80036a8:	d508      	bpl.n	80036bc <_printf_i+0x14c>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6861      	ldr	r1, [r4, #4]
 80036ae:	4299      	cmp	r1, r3
 80036b0:	bfde      	ittt	le
 80036b2:	2330      	movle	r3, #48	; 0x30
 80036b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036bc:	1b52      	subs	r2, r2, r5
 80036be:	6122      	str	r2, [r4, #16]
 80036c0:	f8cd a000 	str.w	sl, [sp]
 80036c4:	464b      	mov	r3, r9
 80036c6:	aa03      	add	r2, sp, #12
 80036c8:	4621      	mov	r1, r4
 80036ca:	4640      	mov	r0, r8
 80036cc:	f7ff fee2 	bl	8003494 <_printf_common>
 80036d0:	3001      	adds	r0, #1
 80036d2:	d14c      	bne.n	800376e <_printf_i+0x1fe>
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	b004      	add	sp, #16
 80036da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036de:	4835      	ldr	r0, [pc, #212]	; (80037b4 <_printf_i+0x244>)
 80036e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036e4:	6829      	ldr	r1, [r5, #0]
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80036ec:	6029      	str	r1, [r5, #0]
 80036ee:	061d      	lsls	r5, r3, #24
 80036f0:	d514      	bpl.n	800371c <_printf_i+0x1ac>
 80036f2:	07df      	lsls	r7, r3, #31
 80036f4:	bf44      	itt	mi
 80036f6:	f043 0320 	orrmi.w	r3, r3, #32
 80036fa:	6023      	strmi	r3, [r4, #0]
 80036fc:	b91e      	cbnz	r6, 8003706 <_printf_i+0x196>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	f023 0320 	bic.w	r3, r3, #32
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	2310      	movs	r3, #16
 8003708:	e7b0      	b.n	800366c <_printf_i+0xfc>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	f043 0320 	orr.w	r3, r3, #32
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	2378      	movs	r3, #120	; 0x78
 8003714:	4828      	ldr	r0, [pc, #160]	; (80037b8 <_printf_i+0x248>)
 8003716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800371a:	e7e3      	b.n	80036e4 <_printf_i+0x174>
 800371c:	0659      	lsls	r1, r3, #25
 800371e:	bf48      	it	mi
 8003720:	b2b6      	uxthmi	r6, r6
 8003722:	e7e6      	b.n	80036f2 <_printf_i+0x182>
 8003724:	4615      	mov	r5, r2
 8003726:	e7bb      	b.n	80036a0 <_printf_i+0x130>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	6826      	ldr	r6, [r4, #0]
 800372c:	6961      	ldr	r1, [r4, #20]
 800372e:	1d18      	adds	r0, r3, #4
 8003730:	6028      	str	r0, [r5, #0]
 8003732:	0635      	lsls	r5, r6, #24
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	d501      	bpl.n	800373c <_printf_i+0x1cc>
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	e002      	b.n	8003742 <_printf_i+0x1d2>
 800373c:	0670      	lsls	r0, r6, #25
 800373e:	d5fb      	bpl.n	8003738 <_printf_i+0x1c8>
 8003740:	8019      	strh	r1, [r3, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	4615      	mov	r5, r2
 8003748:	e7ba      	b.n	80036c0 <_printf_i+0x150>
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	1d1a      	adds	r2, r3, #4
 800374e:	602a      	str	r2, [r5, #0]
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	6862      	ldr	r2, [r4, #4]
 8003754:	2100      	movs	r1, #0
 8003756:	4628      	mov	r0, r5
 8003758:	f7fc fd62 	bl	8000220 <memchr>
 800375c:	b108      	cbz	r0, 8003762 <_printf_i+0x1f2>
 800375e:	1b40      	subs	r0, r0, r5
 8003760:	6060      	str	r0, [r4, #4]
 8003762:	6863      	ldr	r3, [r4, #4]
 8003764:	6123      	str	r3, [r4, #16]
 8003766:	2300      	movs	r3, #0
 8003768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800376c:	e7a8      	b.n	80036c0 <_printf_i+0x150>
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	462a      	mov	r2, r5
 8003772:	4649      	mov	r1, r9
 8003774:	4640      	mov	r0, r8
 8003776:	47d0      	blx	sl
 8003778:	3001      	adds	r0, #1
 800377a:	d0ab      	beq.n	80036d4 <_printf_i+0x164>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	079b      	lsls	r3, r3, #30
 8003780:	d413      	bmi.n	80037aa <_printf_i+0x23a>
 8003782:	68e0      	ldr	r0, [r4, #12]
 8003784:	9b03      	ldr	r3, [sp, #12]
 8003786:	4298      	cmp	r0, r3
 8003788:	bfb8      	it	lt
 800378a:	4618      	movlt	r0, r3
 800378c:	e7a4      	b.n	80036d8 <_printf_i+0x168>
 800378e:	2301      	movs	r3, #1
 8003790:	4632      	mov	r2, r6
 8003792:	4649      	mov	r1, r9
 8003794:	4640      	mov	r0, r8
 8003796:	47d0      	blx	sl
 8003798:	3001      	adds	r0, #1
 800379a:	d09b      	beq.n	80036d4 <_printf_i+0x164>
 800379c:	3501      	adds	r5, #1
 800379e:	68e3      	ldr	r3, [r4, #12]
 80037a0:	9903      	ldr	r1, [sp, #12]
 80037a2:	1a5b      	subs	r3, r3, r1
 80037a4:	42ab      	cmp	r3, r5
 80037a6:	dcf2      	bgt.n	800378e <_printf_i+0x21e>
 80037a8:	e7eb      	b.n	8003782 <_printf_i+0x212>
 80037aa:	2500      	movs	r5, #0
 80037ac:	f104 0619 	add.w	r6, r4, #25
 80037b0:	e7f5      	b.n	800379e <_printf_i+0x22e>
 80037b2:	bf00      	nop
 80037b4:	08004107 	.word	0x08004107
 80037b8:	08004118 	.word	0x08004118

080037bc <_sbrk_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4d06      	ldr	r5, [pc, #24]	; (80037d8 <_sbrk_r+0x1c>)
 80037c0:	2300      	movs	r3, #0
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	f7fc fffe 	bl	80007c8 <_sbrk>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_sbrk_r+0x1a>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_sbrk_r+0x1a>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20000e10 	.word	0x20000e10

080037dc <__swbuf_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	4614      	mov	r4, r2
 80037e2:	4605      	mov	r5, r0
 80037e4:	b118      	cbz	r0, 80037ee <__swbuf_r+0x12>
 80037e6:	6983      	ldr	r3, [r0, #24]
 80037e8:	b90b      	cbnz	r3, 80037ee <__swbuf_r+0x12>
 80037ea:	f000 f9d9 	bl	8003ba0 <__sinit>
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <__swbuf_r+0x98>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	d12b      	bne.n	800384c <__swbuf_r+0x70>
 80037f4:	686c      	ldr	r4, [r5, #4]
 80037f6:	69a3      	ldr	r3, [r4, #24]
 80037f8:	60a3      	str	r3, [r4, #8]
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	071a      	lsls	r2, r3, #28
 80037fe:	d52f      	bpl.n	8003860 <__swbuf_r+0x84>
 8003800:	6923      	ldr	r3, [r4, #16]
 8003802:	b36b      	cbz	r3, 8003860 <__swbuf_r+0x84>
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6963      	ldr	r3, [r4, #20]
 800380c:	b2f6      	uxtb	r6, r6
 800380e:	4283      	cmp	r3, r0
 8003810:	4637      	mov	r7, r6
 8003812:	dc04      	bgt.n	800381e <__swbuf_r+0x42>
 8003814:	4621      	mov	r1, r4
 8003816:	4628      	mov	r0, r5
 8003818:	f000 f92e 	bl	8003a78 <_fflush_r>
 800381c:	bb30      	cbnz	r0, 800386c <__swbuf_r+0x90>
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	3b01      	subs	r3, #1
 8003822:	60a3      	str	r3, [r4, #8]
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	6022      	str	r2, [r4, #0]
 800382a:	701e      	strb	r6, [r3, #0]
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	3001      	adds	r0, #1
 8003830:	4283      	cmp	r3, r0
 8003832:	d004      	beq.n	800383e <__swbuf_r+0x62>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	07db      	lsls	r3, r3, #31
 8003838:	d506      	bpl.n	8003848 <__swbuf_r+0x6c>
 800383a:	2e0a      	cmp	r6, #10
 800383c:	d104      	bne.n	8003848 <__swbuf_r+0x6c>
 800383e:	4621      	mov	r1, r4
 8003840:	4628      	mov	r0, r5
 8003842:	f000 f919 	bl	8003a78 <_fflush_r>
 8003846:	b988      	cbnz	r0, 800386c <__swbuf_r+0x90>
 8003848:	4638      	mov	r0, r7
 800384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <__swbuf_r+0x9c>)
 800384e:	429c      	cmp	r4, r3
 8003850:	d101      	bne.n	8003856 <__swbuf_r+0x7a>
 8003852:	68ac      	ldr	r4, [r5, #8]
 8003854:	e7cf      	b.n	80037f6 <__swbuf_r+0x1a>
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <__swbuf_r+0xa0>)
 8003858:	429c      	cmp	r4, r3
 800385a:	bf08      	it	eq
 800385c:	68ec      	ldreq	r4, [r5, #12]
 800385e:	e7ca      	b.n	80037f6 <__swbuf_r+0x1a>
 8003860:	4621      	mov	r1, r4
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f80c 	bl	8003880 <__swsetup_r>
 8003868:	2800      	cmp	r0, #0
 800386a:	d0cb      	beq.n	8003804 <__swbuf_r+0x28>
 800386c:	f04f 37ff 	mov.w	r7, #4294967295
 8003870:	e7ea      	b.n	8003848 <__swbuf_r+0x6c>
 8003872:	bf00      	nop
 8003874:	0800414c 	.word	0x0800414c
 8003878:	0800416c 	.word	0x0800416c
 800387c:	0800412c 	.word	0x0800412c

08003880 <__swsetup_r>:
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <__swsetup_r+0xcc>)
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	681d      	ldr	r5, [r3, #0]
 8003886:	4606      	mov	r6, r0
 8003888:	460c      	mov	r4, r1
 800388a:	b125      	cbz	r5, 8003896 <__swsetup_r+0x16>
 800388c:	69ab      	ldr	r3, [r5, #24]
 800388e:	b913      	cbnz	r3, 8003896 <__swsetup_r+0x16>
 8003890:	4628      	mov	r0, r5
 8003892:	f000 f985 	bl	8003ba0 <__sinit>
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <__swsetup_r+0xd0>)
 8003898:	429c      	cmp	r4, r3
 800389a:	d10f      	bne.n	80038bc <__swsetup_r+0x3c>
 800389c:	686c      	ldr	r4, [r5, #4]
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a4:	0719      	lsls	r1, r3, #28
 80038a6:	d42c      	bmi.n	8003902 <__swsetup_r+0x82>
 80038a8:	06dd      	lsls	r5, r3, #27
 80038aa:	d411      	bmi.n	80038d0 <__swsetup_r+0x50>
 80038ac:	2309      	movs	r3, #9
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ba:	e03e      	b.n	800393a <__swsetup_r+0xba>
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <__swsetup_r+0xd4>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d101      	bne.n	80038c6 <__swsetup_r+0x46>
 80038c2:	68ac      	ldr	r4, [r5, #8]
 80038c4:	e7eb      	b.n	800389e <__swsetup_r+0x1e>
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <__swsetup_r+0xd8>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	bf08      	it	eq
 80038cc:	68ec      	ldreq	r4, [r5, #12]
 80038ce:	e7e6      	b.n	800389e <__swsetup_r+0x1e>
 80038d0:	0758      	lsls	r0, r3, #29
 80038d2:	d512      	bpl.n	80038fa <__swsetup_r+0x7a>
 80038d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038d6:	b141      	cbz	r1, 80038ea <__swsetup_r+0x6a>
 80038d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038dc:	4299      	cmp	r1, r3
 80038de:	d002      	beq.n	80038e6 <__swsetup_r+0x66>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff fb9d 	bl	8003020 <_free_r>
 80038e6:	2300      	movs	r3, #0
 80038e8:	6363      	str	r3, [r4, #52]	; 0x34
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b94b      	cbnz	r3, 800391a <__swsetup_r+0x9a>
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d003      	beq.n	800391a <__swsetup_r+0x9a>
 8003912:	4621      	mov	r1, r4
 8003914:	4630      	mov	r0, r6
 8003916:	f000 fa09 	bl	8003d2c <__smakebuf_r>
 800391a:	89a0      	ldrh	r0, [r4, #12]
 800391c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003920:	f010 0301 	ands.w	r3, r0, #1
 8003924:	d00a      	beq.n	800393c <__swsetup_r+0xbc>
 8003926:	2300      	movs	r3, #0
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	6963      	ldr	r3, [r4, #20]
 800392c:	425b      	negs	r3, r3
 800392e:	61a3      	str	r3, [r4, #24]
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	b943      	cbnz	r3, 8003946 <__swsetup_r+0xc6>
 8003934:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003938:	d1ba      	bne.n	80038b0 <__swsetup_r+0x30>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	0781      	lsls	r1, r0, #30
 800393e:	bf58      	it	pl
 8003940:	6963      	ldrpl	r3, [r4, #20]
 8003942:	60a3      	str	r3, [r4, #8]
 8003944:	e7f4      	b.n	8003930 <__swsetup_r+0xb0>
 8003946:	2000      	movs	r0, #0
 8003948:	e7f7      	b.n	800393a <__swsetup_r+0xba>
 800394a:	bf00      	nop
 800394c:	20000014 	.word	0x20000014
 8003950:	0800414c 	.word	0x0800414c
 8003954:	0800416c 	.word	0x0800416c
 8003958:	0800412c 	.word	0x0800412c

0800395c <abort>:
 800395c:	b508      	push	{r3, lr}
 800395e:	2006      	movs	r0, #6
 8003960:	f000 fa58 	bl	8003e14 <raise>
 8003964:	2001      	movs	r0, #1
 8003966:	f7fc feb8 	bl	80006da <_exit>
	...

0800396c <__sflush_r>:
 800396c:	898a      	ldrh	r2, [r1, #12]
 800396e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	4605      	mov	r5, r0
 8003974:	0710      	lsls	r0, r2, #28
 8003976:	460c      	mov	r4, r1
 8003978:	d458      	bmi.n	8003a2c <__sflush_r+0xc0>
 800397a:	684b      	ldr	r3, [r1, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	dc05      	bgt.n	800398c <__sflush_r+0x20>
 8003980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	dc02      	bgt.n	800398c <__sflush_r+0x20>
 8003986:	2000      	movs	r0, #0
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800398c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800398e:	2e00      	cmp	r6, #0
 8003990:	d0f9      	beq.n	8003986 <__sflush_r+0x1a>
 8003992:	2300      	movs	r3, #0
 8003994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003998:	682f      	ldr	r7, [r5, #0]
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	d032      	beq.n	8003a04 <__sflush_r+0x98>
 800399e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	075a      	lsls	r2, r3, #29
 80039a4:	d505      	bpl.n	80039b2 <__sflush_r+0x46>
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	1ac0      	subs	r0, r0, r3
 80039aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ac:	b10b      	cbz	r3, 80039b2 <__sflush_r+0x46>
 80039ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b0:	1ac0      	subs	r0, r0, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	4602      	mov	r2, r0
 80039b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039b8:	6a21      	ldr	r1, [r4, #32]
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b0      	blx	r6
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	d106      	bne.n	80039d2 <__sflush_r+0x66>
 80039c4:	6829      	ldr	r1, [r5, #0]
 80039c6:	291d      	cmp	r1, #29
 80039c8:	d82c      	bhi.n	8003a24 <__sflush_r+0xb8>
 80039ca:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <__sflush_r+0x108>)
 80039cc:	40ca      	lsrs	r2, r1
 80039ce:	07d6      	lsls	r6, r2, #31
 80039d0:	d528      	bpl.n	8003a24 <__sflush_r+0xb8>
 80039d2:	2200      	movs	r2, #0
 80039d4:	6062      	str	r2, [r4, #4]
 80039d6:	04d9      	lsls	r1, r3, #19
 80039d8:	6922      	ldr	r2, [r4, #16]
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	d504      	bpl.n	80039e8 <__sflush_r+0x7c>
 80039de:	1c42      	adds	r2, r0, #1
 80039e0:	d101      	bne.n	80039e6 <__sflush_r+0x7a>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b903      	cbnz	r3, 80039e8 <__sflush_r+0x7c>
 80039e6:	6560      	str	r0, [r4, #84]	; 0x54
 80039e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ea:	602f      	str	r7, [r5, #0]
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d0ca      	beq.n	8003986 <__sflush_r+0x1a>
 80039f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039f4:	4299      	cmp	r1, r3
 80039f6:	d002      	beq.n	80039fe <__sflush_r+0x92>
 80039f8:	4628      	mov	r0, r5
 80039fa:	f7ff fb11 	bl	8003020 <_free_r>
 80039fe:	2000      	movs	r0, #0
 8003a00:	6360      	str	r0, [r4, #52]	; 0x34
 8003a02:	e7c1      	b.n	8003988 <__sflush_r+0x1c>
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	2301      	movs	r3, #1
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b0      	blx	r6
 8003a0c:	1c41      	adds	r1, r0, #1
 8003a0e:	d1c7      	bne.n	80039a0 <__sflush_r+0x34>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0c4      	beq.n	80039a0 <__sflush_r+0x34>
 8003a16:	2b1d      	cmp	r3, #29
 8003a18:	d001      	beq.n	8003a1e <__sflush_r+0xb2>
 8003a1a:	2b16      	cmp	r3, #22
 8003a1c:	d101      	bne.n	8003a22 <__sflush_r+0xb6>
 8003a1e:	602f      	str	r7, [r5, #0]
 8003a20:	e7b1      	b.n	8003986 <__sflush_r+0x1a>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	e7ad      	b.n	8003988 <__sflush_r+0x1c>
 8003a2c:	690f      	ldr	r7, [r1, #16]
 8003a2e:	2f00      	cmp	r7, #0
 8003a30:	d0a9      	beq.n	8003986 <__sflush_r+0x1a>
 8003a32:	0793      	lsls	r3, r2, #30
 8003a34:	680e      	ldr	r6, [r1, #0]
 8003a36:	bf08      	it	eq
 8003a38:	694b      	ldreq	r3, [r1, #20]
 8003a3a:	600f      	str	r7, [r1, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2300      	movne	r3, #0
 8003a40:	eba6 0807 	sub.w	r8, r6, r7
 8003a44:	608b      	str	r3, [r1, #8]
 8003a46:	f1b8 0f00 	cmp.w	r8, #0
 8003a4a:	dd9c      	ble.n	8003986 <__sflush_r+0x1a>
 8003a4c:	6a21      	ldr	r1, [r4, #32]
 8003a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a50:	4643      	mov	r3, r8
 8003a52:	463a      	mov	r2, r7
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b0      	blx	r6
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	dc06      	bgt.n	8003a6a <__sflush_r+0xfe>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	e78e      	b.n	8003988 <__sflush_r+0x1c>
 8003a6a:	4407      	add	r7, r0
 8003a6c:	eba8 0800 	sub.w	r8, r8, r0
 8003a70:	e7e9      	b.n	8003a46 <__sflush_r+0xda>
 8003a72:	bf00      	nop
 8003a74:	20400001 	.word	0x20400001

08003a78 <_fflush_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	690b      	ldr	r3, [r1, #16]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	b913      	cbnz	r3, 8003a88 <_fflush_r+0x10>
 8003a82:	2500      	movs	r5, #0
 8003a84:	4628      	mov	r0, r5
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	b118      	cbz	r0, 8003a92 <_fflush_r+0x1a>
 8003a8a:	6983      	ldr	r3, [r0, #24]
 8003a8c:	b90b      	cbnz	r3, 8003a92 <_fflush_r+0x1a>
 8003a8e:	f000 f887 	bl	8003ba0 <__sinit>
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <_fflush_r+0x6c>)
 8003a94:	429c      	cmp	r4, r3
 8003a96:	d11b      	bne.n	8003ad0 <_fflush_r+0x58>
 8003a98:	686c      	ldr	r4, [r5, #4]
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ef      	beq.n	8003a82 <_fflush_r+0xa>
 8003aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa4:	07d0      	lsls	r0, r2, #31
 8003aa6:	d404      	bmi.n	8003ab2 <_fflush_r+0x3a>
 8003aa8:	0599      	lsls	r1, r3, #22
 8003aaa:	d402      	bmi.n	8003ab2 <_fflush_r+0x3a>
 8003aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aae:	f000 f915 	bl	8003cdc <__retarget_lock_acquire_recursive>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	f7ff ff59 	bl	800396c <__sflush_r>
 8003aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003abc:	07da      	lsls	r2, r3, #31
 8003abe:	4605      	mov	r5, r0
 8003ac0:	d4e0      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	059b      	lsls	r3, r3, #22
 8003ac6:	d4dd      	bmi.n	8003a84 <_fflush_r+0xc>
 8003ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aca:	f000 f908 	bl	8003cde <__retarget_lock_release_recursive>
 8003ace:	e7d9      	b.n	8003a84 <_fflush_r+0xc>
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <_fflush_r+0x70>)
 8003ad2:	429c      	cmp	r4, r3
 8003ad4:	d101      	bne.n	8003ada <_fflush_r+0x62>
 8003ad6:	68ac      	ldr	r4, [r5, #8]
 8003ad8:	e7df      	b.n	8003a9a <_fflush_r+0x22>
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_fflush_r+0x74>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	bf08      	it	eq
 8003ae0:	68ec      	ldreq	r4, [r5, #12]
 8003ae2:	e7da      	b.n	8003a9a <_fflush_r+0x22>
 8003ae4:	0800414c 	.word	0x0800414c
 8003ae8:	0800416c 	.word	0x0800416c
 8003aec:	0800412c 	.word	0x0800412c

08003af0 <std>:
 8003af0:	2300      	movs	r3, #0
 8003af2:	b510      	push	{r4, lr}
 8003af4:	4604      	mov	r4, r0
 8003af6:	e9c0 3300 	strd	r3, r3, [r0]
 8003afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003afe:	6083      	str	r3, [r0, #8]
 8003b00:	8181      	strh	r1, [r0, #12]
 8003b02:	6643      	str	r3, [r0, #100]	; 0x64
 8003b04:	81c2      	strh	r2, [r0, #14]
 8003b06:	6183      	str	r3, [r0, #24]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	305c      	adds	r0, #92	; 0x5c
 8003b0e:	f7ff f9af 	bl	8002e70 <memset>
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x38>)
 8003b14:	6263      	str	r3, [r4, #36]	; 0x24
 8003b16:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <std+0x3c>)
 8003b18:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <std+0x40>)
 8003b1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <std+0x44>)
 8003b20:	6224      	str	r4, [r4, #32]
 8003b22:	6323      	str	r3, [r4, #48]	; 0x30
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	08003e4d 	.word	0x08003e4d
 8003b2c:	08003e6f 	.word	0x08003e6f
 8003b30:	08003ea7 	.word	0x08003ea7
 8003b34:	08003ecb 	.word	0x08003ecb

08003b38 <_cleanup_r>:
 8003b38:	4901      	ldr	r1, [pc, #4]	; (8003b40 <_cleanup_r+0x8>)
 8003b3a:	f000 b8af 	b.w	8003c9c <_fwalk_reent>
 8003b3e:	bf00      	nop
 8003b40:	08003a79 	.word	0x08003a79

08003b44 <__sfmoreglue>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	2268      	movs	r2, #104	; 0x68
 8003b48:	1e4d      	subs	r5, r1, #1
 8003b4a:	4355      	muls	r5, r2
 8003b4c:	460e      	mov	r6, r1
 8003b4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b52:	f7ff fad1 	bl	80030f8 <_malloc_r>
 8003b56:	4604      	mov	r4, r0
 8003b58:	b140      	cbz	r0, 8003b6c <__sfmoreglue+0x28>
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	e9c0 1600 	strd	r1, r6, [r0]
 8003b60:	300c      	adds	r0, #12
 8003b62:	60a0      	str	r0, [r4, #8]
 8003b64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b68:	f7ff f982 	bl	8002e70 <memset>
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}

08003b70 <__sfp_lock_acquire>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__sfp_lock_acquire+0x8>)
 8003b72:	f000 b8b3 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000e15 	.word	0x20000e15

08003b7c <__sfp_lock_release>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	; (8003b84 <__sfp_lock_release+0x8>)
 8003b7e:	f000 b8ae 	b.w	8003cde <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	20000e15 	.word	0x20000e15

08003b88 <__sinit_lock_acquire>:
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <__sinit_lock_acquire+0x8>)
 8003b8a:	f000 b8a7 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003b8e:	bf00      	nop
 8003b90:	20000e16 	.word	0x20000e16

08003b94 <__sinit_lock_release>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__sinit_lock_release+0x8>)
 8003b96:	f000 b8a2 	b.w	8003cde <__retarget_lock_release_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20000e16 	.word	0x20000e16

08003ba0 <__sinit>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	f7ff fff0 	bl	8003b88 <__sinit_lock_acquire>
 8003ba8:	69a3      	ldr	r3, [r4, #24]
 8003baa:	b11b      	cbz	r3, 8003bb4 <__sinit+0x14>
 8003bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb0:	f7ff bff0 	b.w	8003b94 <__sinit_lock_release>
 8003bb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003bb8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <__sinit+0x68>)
 8003bbc:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <__sinit+0x6c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	bf04      	itt	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	61a3      	streq	r3, [r4, #24]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f000 f820 	bl	8003c10 <__sfp>
 8003bd0:	6060      	str	r0, [r4, #4]
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f000 f81c 	bl	8003c10 <__sfp>
 8003bd8:	60a0      	str	r0, [r4, #8]
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f000 f818 	bl	8003c10 <__sfp>
 8003be0:	2200      	movs	r2, #0
 8003be2:	60e0      	str	r0, [r4, #12]
 8003be4:	2104      	movs	r1, #4
 8003be6:	6860      	ldr	r0, [r4, #4]
 8003be8:	f7ff ff82 	bl	8003af0 <std>
 8003bec:	68a0      	ldr	r0, [r4, #8]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2109      	movs	r1, #9
 8003bf2:	f7ff ff7d 	bl	8003af0 <std>
 8003bf6:	68e0      	ldr	r0, [r4, #12]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	2112      	movs	r1, #18
 8003bfc:	f7ff ff78 	bl	8003af0 <std>
 8003c00:	2301      	movs	r3, #1
 8003c02:	61a3      	str	r3, [r4, #24]
 8003c04:	e7d2      	b.n	8003bac <__sinit+0xc>
 8003c06:	bf00      	nop
 8003c08:	08004044 	.word	0x08004044
 8003c0c:	08003b39 	.word	0x08003b39

08003c10 <__sfp>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	4607      	mov	r7, r0
 8003c14:	f7ff ffac 	bl	8003b70 <__sfp_lock_acquire>
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <__sfp+0x84>)
 8003c1a:	681e      	ldr	r6, [r3, #0]
 8003c1c:	69b3      	ldr	r3, [r6, #24]
 8003c1e:	b913      	cbnz	r3, 8003c26 <__sfp+0x16>
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff ffbd 	bl	8003ba0 <__sinit>
 8003c26:	3648      	adds	r6, #72	; 0x48
 8003c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	d503      	bpl.n	8003c38 <__sfp+0x28>
 8003c30:	6833      	ldr	r3, [r6, #0]
 8003c32:	b30b      	cbz	r3, 8003c78 <__sfp+0x68>
 8003c34:	6836      	ldr	r6, [r6, #0]
 8003c36:	e7f7      	b.n	8003c28 <__sfp+0x18>
 8003c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c3c:	b9d5      	cbnz	r5, 8003c74 <__sfp+0x64>
 8003c3e:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <__sfp+0x88>)
 8003c40:	60e3      	str	r3, [r4, #12]
 8003c42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c46:	6665      	str	r5, [r4, #100]	; 0x64
 8003c48:	f000 f847 	bl	8003cda <__retarget_lock_init_recursive>
 8003c4c:	f7ff ff96 	bl	8003b7c <__sfp_lock_release>
 8003c50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003c54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003c58:	6025      	str	r5, [r4, #0]
 8003c5a:	61a5      	str	r5, [r4, #24]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c64:	f7ff f904 	bl	8002e70 <memset>
 8003c68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c70:	4620      	mov	r0, r4
 8003c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c74:	3468      	adds	r4, #104	; 0x68
 8003c76:	e7d9      	b.n	8003c2c <__sfp+0x1c>
 8003c78:	2104      	movs	r1, #4
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	f7ff ff62 	bl	8003b44 <__sfmoreglue>
 8003c80:	4604      	mov	r4, r0
 8003c82:	6030      	str	r0, [r6, #0]
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1d5      	bne.n	8003c34 <__sfp+0x24>
 8003c88:	f7ff ff78 	bl	8003b7c <__sfp_lock_release>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	e7ee      	b.n	8003c70 <__sfp+0x60>
 8003c92:	bf00      	nop
 8003c94:	08004044 	.word	0x08004044
 8003c98:	ffff0001 	.word	0xffff0001

08003c9c <_fwalk_reent>:
 8003c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	4688      	mov	r8, r1
 8003ca4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ca8:	2700      	movs	r7, #0
 8003caa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cae:	f1b9 0901 	subs.w	r9, r9, #1
 8003cb2:	d505      	bpl.n	8003cc0 <_fwalk_reent+0x24>
 8003cb4:	6824      	ldr	r4, [r4, #0]
 8003cb6:	2c00      	cmp	r4, #0
 8003cb8:	d1f7      	bne.n	8003caa <_fwalk_reent+0xe>
 8003cba:	4638      	mov	r0, r7
 8003cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc0:	89ab      	ldrh	r3, [r5, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d907      	bls.n	8003cd6 <_fwalk_reent+0x3a>
 8003cc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	d003      	beq.n	8003cd6 <_fwalk_reent+0x3a>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	47c0      	blx	r8
 8003cd4:	4307      	orrs	r7, r0
 8003cd6:	3568      	adds	r5, #104	; 0x68
 8003cd8:	e7e9      	b.n	8003cae <_fwalk_reent+0x12>

08003cda <__retarget_lock_init_recursive>:
 8003cda:	4770      	bx	lr

08003cdc <__retarget_lock_acquire_recursive>:
 8003cdc:	4770      	bx	lr

08003cde <__retarget_lock_release_recursive>:
 8003cde:	4770      	bx	lr

08003ce0 <__swhatbuf_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	b096      	sub	sp, #88	; 0x58
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	da08      	bge.n	8003d04 <__swhatbuf_r+0x24>
 8003cf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	602a      	str	r2, [r5, #0]
 8003cfa:	061a      	lsls	r2, r3, #24
 8003cfc:	d410      	bmi.n	8003d20 <__swhatbuf_r+0x40>
 8003cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d02:	e00e      	b.n	8003d22 <__swhatbuf_r+0x42>
 8003d04:	466a      	mov	r2, sp
 8003d06:	f000 f907 	bl	8003f18 <_fstat_r>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	dbf1      	blt.n	8003cf2 <__swhatbuf_r+0x12>
 8003d0e:	9a01      	ldr	r2, [sp, #4]
 8003d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d18:	425a      	negs	r2, r3
 8003d1a:	415a      	adcs	r2, r3
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	e7ee      	b.n	8003cfe <__swhatbuf_r+0x1e>
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	2000      	movs	r0, #0
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	b016      	add	sp, #88	; 0x58
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d2c <__smakebuf_r>:
 8003d2c:	898b      	ldrh	r3, [r1, #12]
 8003d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d30:	079d      	lsls	r5, r3, #30
 8003d32:	4606      	mov	r6, r0
 8003d34:	460c      	mov	r4, r1
 8003d36:	d507      	bpl.n	8003d48 <__smakebuf_r+0x1c>
 8003d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	2301      	movs	r3, #1
 8003d42:	6163      	str	r3, [r4, #20]
 8003d44:	b002      	add	sp, #8
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	ab01      	add	r3, sp, #4
 8003d4a:	466a      	mov	r2, sp
 8003d4c:	f7ff ffc8 	bl	8003ce0 <__swhatbuf_r>
 8003d50:	9900      	ldr	r1, [sp, #0]
 8003d52:	4605      	mov	r5, r0
 8003d54:	4630      	mov	r0, r6
 8003d56:	f7ff f9cf 	bl	80030f8 <_malloc_r>
 8003d5a:	b948      	cbnz	r0, 8003d70 <__smakebuf_r+0x44>
 8003d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d60:	059a      	lsls	r2, r3, #22
 8003d62:	d4ef      	bmi.n	8003d44 <__smakebuf_r+0x18>
 8003d64:	f023 0303 	bic.w	r3, r3, #3
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	e7e3      	b.n	8003d38 <__smakebuf_r+0xc>
 8003d70:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <__smakebuf_r+0x7c>)
 8003d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	6020      	str	r0, [r4, #0]
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	9b00      	ldr	r3, [sp, #0]
 8003d80:	6163      	str	r3, [r4, #20]
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	6120      	str	r0, [r4, #16]
 8003d86:	b15b      	cbz	r3, 8003da0 <__smakebuf_r+0x74>
 8003d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f8d5 	bl	8003f3c <_isatty_r>
 8003d92:	b128      	cbz	r0, 8003da0 <__smakebuf_r+0x74>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	89a0      	ldrh	r0, [r4, #12]
 8003da2:	4305      	orrs	r5, r0
 8003da4:	81a5      	strh	r5, [r4, #12]
 8003da6:	e7cd      	b.n	8003d44 <__smakebuf_r+0x18>
 8003da8:	08003b39 	.word	0x08003b39

08003dac <__malloc_lock>:
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <__malloc_lock+0x8>)
 8003dae:	f7ff bf95 	b.w	8003cdc <__retarget_lock_acquire_recursive>
 8003db2:	bf00      	nop
 8003db4:	20000e14 	.word	0x20000e14

08003db8 <__malloc_unlock>:
 8003db8:	4801      	ldr	r0, [pc, #4]	; (8003dc0 <__malloc_unlock+0x8>)
 8003dba:	f7ff bf90 	b.w	8003cde <__retarget_lock_release_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	20000e14 	.word	0x20000e14

08003dc4 <_raise_r>:
 8003dc4:	291f      	cmp	r1, #31
 8003dc6:	b538      	push	{r3, r4, r5, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	d904      	bls.n	8003dd8 <_raise_r+0x14>
 8003dce:	2316      	movs	r3, #22
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dda:	b112      	cbz	r2, 8003de2 <_raise_r+0x1e>
 8003ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003de0:	b94b      	cbnz	r3, 8003df6 <_raise_r+0x32>
 8003de2:	4620      	mov	r0, r4
 8003de4:	f000 f830 	bl	8003e48 <_getpid_r>
 8003de8:	462a      	mov	r2, r5
 8003dea:	4601      	mov	r1, r0
 8003dec:	4620      	mov	r0, r4
 8003dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df2:	f000 b817 	b.w	8003e24 <_kill_r>
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00a      	beq.n	8003e10 <_raise_r+0x4c>
 8003dfa:	1c59      	adds	r1, r3, #1
 8003dfc:	d103      	bne.n	8003e06 <_raise_r+0x42>
 8003dfe:	2316      	movs	r3, #22
 8003e00:	6003      	str	r3, [r0, #0]
 8003e02:	2001      	movs	r0, #1
 8003e04:	e7e7      	b.n	8003dd6 <_raise_r+0x12>
 8003e06:	2400      	movs	r4, #0
 8003e08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	4798      	blx	r3
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7e0      	b.n	8003dd6 <_raise_r+0x12>

08003e14 <raise>:
 8003e14:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <raise+0xc>)
 8003e16:	4601      	mov	r1, r0
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f7ff bfd3 	b.w	8003dc4 <_raise_r>
 8003e1e:	bf00      	nop
 8003e20:	20000014 	.word	0x20000014

08003e24 <_kill_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_kill_r+0x20>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	4611      	mov	r1, r2
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	f7fc fc42 	bl	80006ba <_kill>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d102      	bne.n	8003e40 <_kill_r+0x1c>
 8003e3a:	682b      	ldr	r3, [r5, #0]
 8003e3c:	b103      	cbz	r3, 8003e40 <_kill_r+0x1c>
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	bd38      	pop	{r3, r4, r5, pc}
 8003e42:	bf00      	nop
 8003e44:	20000e10 	.word	0x20000e10

08003e48 <_getpid_r>:
 8003e48:	f7fc bc2f 	b.w	80006aa <_getpid>

08003e4c <__sread>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	460c      	mov	r4, r1
 8003e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e54:	f000 f894 	bl	8003f80 <_read_r>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	bfab      	itete	ge
 8003e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e60:	181b      	addge	r3, r3, r0
 8003e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e66:	bfac      	ite	ge
 8003e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e6a:	81a3      	strhlt	r3, [r4, #12]
 8003e6c:	bd10      	pop	{r4, pc}

08003e6e <__swrite>:
 8003e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	461f      	mov	r7, r3
 8003e74:	898b      	ldrh	r3, [r1, #12]
 8003e76:	05db      	lsls	r3, r3, #23
 8003e78:	4605      	mov	r5, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	d505      	bpl.n	8003e8c <__swrite+0x1e>
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	f000 f868 	bl	8003f5c <_lseek_r>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	f000 b817 	b.w	8003ed4 <_write_r>

08003ea6 <__sseek>:
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eae:	f000 f855 	bl	8003f5c <_lseek_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	bf15      	itete	ne
 8003eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ec2:	81a3      	strheq	r3, [r4, #12]
 8003ec4:	bf18      	it	ne
 8003ec6:	81a3      	strhne	r3, [r4, #12]
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <__sclose>:
 8003eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ece:	f000 b813 	b.w	8003ef8 <_close_r>
	...

08003ed4 <_write_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d07      	ldr	r5, [pc, #28]	; (8003ef4 <_write_r+0x20>)
 8003ed8:	4604      	mov	r4, r0
 8003eda:	4608      	mov	r0, r1
 8003edc:	4611      	mov	r1, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	602a      	str	r2, [r5, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f7fc fc20 	bl	8000728 <_write>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_write_r+0x1e>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_write_r+0x1e>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	20000e10 	.word	0x20000e10

08003ef8 <_close_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_close_r+0x1c>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	f7fc fc2c 	bl	8000760 <_close>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_close_r+0x1a>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_close_r+0x1a>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000e10 	.word	0x20000e10

08003f18 <_fstat_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	; (8003f38 <_fstat_r+0x20>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	f7fc fc27 	bl	8000778 <_fstat>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d102      	bne.n	8003f34 <_fstat_r+0x1c>
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	b103      	cbz	r3, 8003f34 <_fstat_r+0x1c>
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
 8003f36:	bf00      	nop
 8003f38:	20000e10 	.word	0x20000e10

08003f3c <_isatty_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_isatty_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fc fc26 	bl	8000798 <_isatty>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_isatty_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_isatty_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000e10 	.word	0x20000e10

08003f5c <_lseek_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_lseek_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fc fc1f 	bl	80007ae <_lseek>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_lseek_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_lseek_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	20000e10 	.word	0x20000e10

08003f80 <_read_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_read_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fbad 	bl	80006ee <_read>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_read_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_read_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000e10 	.word	0x20000e10

08003fa4 <_gettimeofday>:
 8003fa4:	4b02      	ldr	r3, [pc, #8]	; (8003fb0 <_gettimeofday+0xc>)
 8003fa6:	2258      	movs	r2, #88	; 0x58
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	4770      	bx	lr
 8003fb0:	20000e10 	.word	0x20000e10

08003fb4 <_init>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr

08003fc0 <_fini>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr
